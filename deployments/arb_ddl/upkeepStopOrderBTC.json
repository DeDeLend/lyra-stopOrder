{
  "address": "0x73A0112264773C528B395DE13c92F354f0Cd03B7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stopOrder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStopOrder",
          "type": "address"
        }
      ],
      "name": "setStopOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopOrder",
      "outputs": [
        {
          "internalType": "contract IStopOrder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x698c9a35b5f5cb1cc98a48b121bb10e7609900133ef51aa9600cc95cbba29c19",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x73A0112264773C528B395DE13c92F354f0Cd03B7",
    "transactionIndex": 1,
    "gasUsed": "5083500",
    "logsBloom": "0x
    "blockHash": "0x97ce9b530623347bdc708bcea57462ee3e05514d0b9ff92c04c4d555d4878584",
    "transactionHash": "0x698c9a35b5f5cb1cc98a48b121bb10e7609900133ef51aa9600cc95cbba29c19",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 104314150,
        "transactionHash": "0x698c9a35b5f5cb1cc98a48b121bb10e7609900133ef51aa9600cc95cbba29c19",
        "address": "0x73A0112264773C528B395DE13c92F354f0Cd03B7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x97ce9b530623347bdc708bcea57462ee3e05514d0b9ff92c04c4d555d4878584"
      }
    ],
    "blockNumber": 104314150,
    "cumulativeGasUsed": "5083500",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDE51a10A711412353e825623F58F56d9D0EA98cF"
  ],
  "numDeployments": 2,
  "solcInputHash": "c20be40a4653c18459f568f67498b934",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stopOrder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStopOrder\",\"type\":\"address\"}],\"name\":\"setStopOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopOrder\",\"outputs\":[{\"internalType\":\"contract IStopOrder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Upkeep.sol\":\"UpkeepStopOrder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Upkeep.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * DeDeLend\\n * Copyright (C) 2023 DeDeLend\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n \\npragma solidity ^0.8.0;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IStopOrder {\\n    function checkStopOrder(uint256 tokenId) external view returns (bool);\\n    function executeStopOrder(uint256 tokenId) external;\\n    function indexTokenToTokenId(uint256 indexToken) external view returns (uint256);\\n}\\n\\ncontract UpkeepStopOrder is \\n    AutomationCompatibleInterface, \\n    Ownable\\n{\\n    IStopOrder public stopOrder;\\n    constructor(\\n        address _stopOrder\\n    ) { \\n        stopOrder = IStopOrder(_stopOrder);\\n    }\\n\\n    ////////////////\\n    // ONLY OWNER //\\n    ////////////////\\n\\n    function setStopOrder(address newStopOrder) external onlyOwner {\\n        stopOrder = IStopOrder(newStopOrder);\\n    }    \\n\\n    //////////\\n    // VIEW //\\n    //////////\\n\\n    function checkUpkeep(\\n        bytes calldata checkData\\n    )\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        (uint256 lowerBound, uint256 upperBound) = abi.decode(\\n            checkData,\\n            (uint256, uint256)\\n        );\\n        uint256 counter;\\n        for (uint256 i = 0; i < upperBound - lowerBound + 1; i++) {\\n            if (stopOrder.checkStopOrder(stopOrder.indexTokenToTokenId(lowerBound + i))) {\\n                counter++;\\n            }\\n            if (counter == 1) {\\n                break;\\n            }\\n        }\\n\\n        uint256[] memory indexes = new uint256[](counter);\\n\\n        upkeepNeeded = false;\\n        uint256 indexCounter;\\n\\n        for (uint256 i = 0; i < upperBound - lowerBound + 1; i++) {\\n            if (stopOrder.checkStopOrder(stopOrder.indexTokenToTokenId(lowerBound + i))) {\\n                upkeepNeeded = true;\\n                indexes[indexCounter] = stopOrder.indexTokenToTokenId(lowerBound + i);\\n                indexCounter++;\\n                if (indexCounter == counter) {\\n                    break;\\n                }\\n            }\\n        }\\n        performData = abi.encode(indexes);\\n        return (upkeepNeeded, performData);\\n    }\\n\\n    //////////////\\n    // EXTERNAL //\\n    //////////////    \\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        (uint256[] memory indexes) = abi.decode(\\n            performData,\\n            (uint256[])\\n        );\\n        for (uint256 i = 0; i < indexes.length; i++) {\\n            if (stopOrder.checkStopOrder(indexes[i])) {\\n                stopOrder.executeStopOrder(indexes[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47ef4043f374ce8473d9c185de20c7ad5924c300a698c373d79657f078fa8a60\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001567380380620015678339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b61135080620002176000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100ed5780638da5cb5b146100f7578063cfad3d6c14610115578063f2fde38b146101315761007d565b80634585e33b14610082578063639f908e1461009e5780636e04ff0d146100bc575b600080fd5b61009c60048036038101906100979190610ad8565b61014d565b005b6100a66102f7565b6040516100b39190610ba4565b60405180910390f35b6100d660048036038101906100d19190610ad8565b61031d565b6040516100e4929190610c73565b60405180910390f35b6100f5610808565b005b6100ff61081c565b60405161010c9190610cc4565b60405180910390f35b61012f600480360381019061012a9190610d0b565b610845565b005b61014b60048036038101906101469190610d0b565b610891565b005b6000828281019061015e9190610eac565b905060005b81518110156102f157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386d36c9a8383815181106101bd576101bc610ef5565b5b60200260200101516040518263ffffffff1660e01b81526004016101e19190610f33565b60206040518083038186803b1580156101f957600080fd5b505afa15801561020d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102319190610f7a565b156102de57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166378257f6683838151811061028757610286610ef5565b5b60200260200101516040518263ffffffff1660e01b81526004016102ab9190610f33565b600060405180830381600087803b1580156102c557600080fd5b505af11580156102d9573d6000803e3d6000fd5b505050505b80806102e990610fd6565b915050610163565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060606000808585810190610333919061101f565b91509150600080600090505b6001848461034d919061105f565b6103579190611093565b8110156104f357600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386d36c9a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e233ac5884886103e69190611093565b6040518263ffffffff1660e01b81526004016104029190610f33565b60206040518083038186803b15801561041a57600080fd5b505afa15801561042e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045291906110fe565b6040518263ffffffff1660e01b815260040161046e9190610f33565b60206040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be9190610f7a565b156104d25781806104ce90610fd6565b9250505b60018214156104e0576104f3565b80806104eb90610fd6565b91505061033f565b5060008167ffffffffffffffff8111156105105761050f610d38565b5b60405190808252806020026020018201604052801561053e5781602001602082028036833780820191505090505b50905060009550600080600090505b6001868661055b919061105f565b6105659190611093565b8110156107d957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386d36c9a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e233ac58848a6105f49190611093565b6040518263ffffffff1660e01b81526004016106109190610f33565b60206040518083038186803b15801561062857600080fd5b505afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066091906110fe565b6040518263ffffffff1660e01b815260040161067c9190610f33565b60206040518083038186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190610f7a565b156107c65760019750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e233ac58828861071f9190611093565b6040518263ffffffff1660e01b815260040161073b9190610f33565b60206040518083038186803b15801561075357600080fd5b505afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b91906110fe565b83838151811061079e5761079d610ef5565b5b60200260200101818152505081806107b590610fd6565b925050838214156107c5576107d9565b5b80806107d190610fd6565b91505061054d565b50816040516020016107eb91906111e9565b604051602081830303815290604052955050505050509250929050565b610810610915565b61081a6000610993565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61084d610915565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610899610915565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610909576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109009061128e565b60405180910390fd5b61091281610993565b50565b61091d610a57565b73ffffffffffffffffffffffffffffffffffffffff1661093b61081c565b73ffffffffffffffffffffffffffffffffffffffff1614610991576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610988906112fa565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610a9857610a97610a73565b5b8235905067ffffffffffffffff811115610ab557610ab4610a78565b5b602083019150836001820283011115610ad157610ad0610a7d565b5b9250929050565b60008060208385031215610aef57610aee610a69565b5b600083013567ffffffffffffffff811115610b0d57610b0c610a6e565b5b610b1985828601610a82565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b6a610b65610b6084610b25565b610b45565b610b25565b9050919050565b6000610b7c82610b4f565b9050919050565b6000610b8e82610b71565b9050919050565b610b9e81610b83565b82525050565b6000602082019050610bb96000830184610b95565b92915050565b60008115159050919050565b610bd481610bbf565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c14578082015181840152602081019050610bf9565b83811115610c23576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c4582610bda565b610c4f8185610be5565b9350610c5f818560208601610bf6565b610c6881610c29565b840191505092915050565b6000604082019050610c886000830185610bcb565b8181036020830152610c9a8184610c3a565b90509392505050565b6000610cae82610b25565b9050919050565b610cbe81610ca3565b82525050565b6000602082019050610cd96000830184610cb5565b92915050565b610ce881610ca3565b8114610cf357600080fd5b50565b600081359050610d0581610cdf565b92915050565b600060208284031215610d2157610d20610a69565b5b6000610d2f84828501610cf6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d7082610c29565b810181811067ffffffffffffffff82111715610d8f57610d8e610d38565b5b80604052505050565b6000610da2610a5f565b9050610dae8282610d67565b919050565b600067ffffffffffffffff821115610dce57610dcd610d38565b5b602082029050602081019050919050565b6000819050919050565b610df281610ddf565b8114610dfd57600080fd5b50565b600081359050610e0f81610de9565b92915050565b6000610e28610e2384610db3565b610d98565b90508083825260208201905060208402830185811115610e4b57610e4a610a7d565b5b835b81811015610e745780610e608882610e00565b845260208401935050602081019050610e4d565b5050509392505050565b600082601f830112610e9357610e92610a73565b5b8135610ea3848260208601610e15565b91505092915050565b600060208284031215610ec257610ec1610a69565b5b600082013567ffffffffffffffff811115610ee057610edf610a6e565b5b610eec84828501610e7e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610f2d81610ddf565b82525050565b6000602082019050610f486000830184610f24565b92915050565b610f5781610bbf565b8114610f6257600080fd5b50565b600081519050610f7481610f4e565b92915050565b600060208284031215610f9057610f8f610a69565b5b6000610f9e84828501610f65565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fe182610ddf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561101457611013610fa7565b5b600182019050919050565b6000806040838503121561103657611035610a69565b5b600061104485828601610e00565b925050602061105585828601610e00565b9150509250929050565b600061106a82610ddf565b915061107583610ddf565b92508282101561108857611087610fa7565b5b828203905092915050565b600061109e82610ddf565b91506110a983610ddf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110de576110dd610fa7565b5b828201905092915050565b6000815190506110f881610de9565b92915050565b60006020828403121561111457611113610a69565b5b6000611122848285016110e9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61116081610ddf565b82525050565b60006111728383611157565b60208301905092915050565b6000602082019050919050565b60006111968261112b565b6111a08185611136565b93506111ab83611147565b8060005b838110156111dc5781516111c38882611166565b97506111ce8361117e565b9250506001810190506111af565b5085935050505092915050565b60006020820190508181036000830152611203818461118b565b905092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061127860268361120b565b91506112838261121c565b604082019050919050565b600060208201905081810360008301526112a78161126b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006112e460208361120b565b91506112ef826112ae565b602082019050919050565b60006020820190508181036000830152611313816112d7565b905091905056fea2646970667358221220fd6dae2dde266082249952aa64fc72f36cec0edd99435a4766afe00b0c42581564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100ed5780638da5cb5b146100f7578063cfad3d6c14610115578063f2fde38b146101315761007d565b80634585e33b14610082578063639f908e1461009e5780636e04ff0d146100bc575b600080fd5b61009c60048036038101906100979190610ad8565b61014d565b005b6100a66102f7565b6040516100b39190610ba4565b60405180910390f35b6100d660048036038101906100d19190610ad8565b61031d565b6040516100e4929190610c73565b60405180910390f35b6100f5610808565b005b6100ff61081c565b60405161010c9190610cc4565b60405180910390f35b61012f600480360381019061012a9190610d0b565b610845565b005b61014b60048036038101906101469190610d0b565b610891565b005b6000828281019061015e9190610eac565b905060005b81518110156102f157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386d36c9a8383815181106101bd576101bc610ef5565b5b60200260200101516040518263ffffffff1660e01b81526004016101e19190610f33565b60206040518083038186803b1580156101f957600080fd5b505afa15801561020d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102319190610f7a565b156102de57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166378257f6683838151811061028757610286610ef5565b5b60200260200101516040518263ffffffff1660e01b81526004016102ab9190610f33565b600060405180830381600087803b1580156102c557600080fd5b505af11580156102d9573d6000803e3d6000fd5b505050505b80806102e990610fd6565b915050610163565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060606000808585810190610333919061101f565b91509150600080600090505b6001848461034d919061105f565b6103579190611093565b8110156104f357600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386d36c9a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e233ac5884886103e69190611093565b6040518263ffffffff1660e01b81526004016104029190610f33565b60206040518083038186803b15801561041a57600080fd5b505afa15801561042e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045291906110fe565b6040518263ffffffff1660e01b815260040161046e9190610f33565b60206040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be9190610f7a565b156104d25781806104ce90610fd6565b9250505b60018214156104e0576104f3565b80806104eb90610fd6565b91505061033f565b5060008167ffffffffffffffff8111156105105761050f610d38565b5b60405190808252806020026020018201604052801561053e5781602001602082028036833780820191505090505b50905060009550600080600090505b6001868661055b919061105f565b6105659190611093565b8110156107d957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386d36c9a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e233ac58848a6105f49190611093565b6040518263ffffffff1660e01b81526004016106109190610f33565b60206040518083038186803b15801561062857600080fd5b505afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066091906110fe565b6040518263ffffffff1660e01b815260040161067c9190610f33565b60206040518083038186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190610f7a565b156107c65760019750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e233ac58828861071f9190611093565b6040518263ffffffff1660e01b815260040161073b9190610f33565b60206040518083038186803b15801561075357600080fd5b505afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b91906110fe565b83838151811061079e5761079d610ef5565b5b60200260200101818152505081806107b590610fd6565b925050838214156107c5576107d9565b5b80806107d190610fd6565b91505061054d565b50816040516020016107eb91906111e9565b604051602081830303815290604052955050505050509250929050565b610810610915565b61081a6000610993565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61084d610915565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610899610915565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610909576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109009061128e565b60405180910390fd5b61091281610993565b50565b61091d610a57565b73ffffffffffffffffffffffffffffffffffffffff1661093b61081c565b73ffffffffffffffffffffffffffffffffffffffff1614610991576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610988906112fa565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610a9857610a97610a73565b5b8235905067ffffffffffffffff811115610ab557610ab4610a78565b5b602083019150836001820283011115610ad157610ad0610a7d565b5b9250929050565b60008060208385031215610aef57610aee610a69565b5b600083013567ffffffffffffffff811115610b0d57610b0c610a6e565b5b610b1985828601610a82565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b6a610b65610b6084610b25565b610b45565b610b25565b9050919050565b6000610b7c82610b4f565b9050919050565b6000610b8e82610b71565b9050919050565b610b9e81610b83565b82525050565b6000602082019050610bb96000830184610b95565b92915050565b60008115159050919050565b610bd481610bbf565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c14578082015181840152602081019050610bf9565b83811115610c23576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c4582610bda565b610c4f8185610be5565b9350610c5f818560208601610bf6565b610c6881610c29565b840191505092915050565b6000604082019050610c886000830185610bcb565b8181036020830152610c9a8184610c3a565b90509392505050565b6000610cae82610b25565b9050919050565b610cbe81610ca3565b82525050565b6000602082019050610cd96000830184610cb5565b92915050565b610ce881610ca3565b8114610cf357600080fd5b50565b600081359050610d0581610cdf565b92915050565b600060208284031215610d2157610d20610a69565b5b6000610d2f84828501610cf6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d7082610c29565b810181811067ffffffffffffffff82111715610d8f57610d8e610d38565b5b80604052505050565b6000610da2610a5f565b9050610dae8282610d67565b919050565b600067ffffffffffffffff821115610dce57610dcd610d38565b5b602082029050602081019050919050565b6000819050919050565b610df281610ddf565b8114610dfd57600080fd5b50565b600081359050610e0f81610de9565b92915050565b6000610e28610e2384610db3565b610d98565b90508083825260208201905060208402830185811115610e4b57610e4a610a7d565b5b835b81811015610e745780610e608882610e00565b845260208401935050602081019050610e4d565b5050509392505050565b600082601f830112610e9357610e92610a73565b5b8135610ea3848260208601610e15565b91505092915050565b600060208284031215610ec257610ec1610a69565b5b600082013567ffffffffffffffff811115610ee057610edf610a6e565b5b610eec84828501610e7e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610f2d81610ddf565b82525050565b6000602082019050610f486000830184610f24565b92915050565b610f5781610bbf565b8114610f6257600080fd5b50565b600081519050610f7481610f4e565b92915050565b600060208284031215610f9057610f8f610a69565b5b6000610f9e84828501610f65565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fe182610ddf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561101457611013610fa7565b5b600182019050919050565b6000806040838503121561103657611035610a69565b5b600061104485828601610e00565b925050602061105585828601610e00565b9150509250929050565b600061106a82610ddf565b915061107583610ddf565b92508282101561108857611087610fa7565b5b828203905092915050565b600061109e82610ddf565b91506110a983610ddf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110de576110dd610fa7565b5b828201905092915050565b6000815190506110f881610de9565b92915050565b60006020828403121561111457611113610a69565b5b6000611122848285016110e9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61116081610ddf565b82525050565b60006111728383611157565b60208301905092915050565b6000602082019050919050565b60006111968261112b565b6111a08185611136565b93506111ab83611147565b8060005b838110156111dc5781516111c38882611166565b97506111ce8361117e565b9250506001810190506111af565b5085935050505092915050565b60006020820190508181036000830152611203818461118b565b905092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061127860268361120b565b91506112838261121c565b604082019050919050565b600060208201905081810360008301526112a78161126b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006112e460208361120b565b91506112ef826112ae565b602082019050919050565b60006020820190508181036000830152611313816112d7565b905091905056fea2646970667358221220fd6dae2dde266082249952aa64fc72f36cec0edd99435a4766afe00b0c42581564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.",
        "params": {
          "checkData": "specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."
        },
        "returns": {
          "performData": "bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.",
          "upkeepNeeded": "boolean to indicate whether the keeper should call performUpkeep or not."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."
      },
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72,
        "contract": "contracts/Upkeep.sol:UpkeepStopOrder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1569,
        "contract": "contracts/Upkeep.sol:UpkeepStopOrder",
        "label": "stopOrder",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IStopOrder)1562"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IStopOrder)1562": {
        "encoding": "inplace",
        "label": "contract IStopOrder",
        "numberOfBytes": "20"
      }
    }
  }
}