{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/StopOrder.sol": {
      "content": "/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * DeDeLend\n * Copyright (C) 2023 DeDeLend\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n\ninterface ILiquidityPool {\n    struct Liquidity {\n        // Amount of liquidity available for option collateral and premiums\n        uint freeLiquidity;\n        // Amount of liquidity available for withdrawals - different to freeLiquidity\n        uint burnableLiquidity;\n        // Amount of liquidity reserved for long options sold to traders\n        uint reservedCollatLiquidity;\n        // Portion of liquidity reserved for delta hedging (quote outstanding)\n        uint pendingDeltaLiquidity;\n        // Current value of delta hedge\n        uint usedDeltaLiquidity;\n        // Net asset value, including everything and netOptionValue\n        uint NAV;\n        // longs scaled down by this factor in a contract adjustment event\n        uint longScaleFactor;\n    }\n}\n\ninterface IOptionMarket {\n    enum OptionType {\n        LONG_CALL,\n        LONG_PUT,\n        SHORT_CALL_BASE,\n        SHORT_CALL_QUOTE,\n        SHORT_PUT_QUOTE\n    }\n\n    enum TradeDirection {\n        OPEN,\n        CLOSE,\n        LIQUIDATE\n    }\n\n    struct Strike {\n        // strike listing identifier\n        uint id;\n        // strike price\n        uint strikePrice;\n        // volatility component specific to the strike listing (boardIv * skew = vol of strike)\n        uint skew;\n        // total user long call exposure\n        uint longCall;\n        // total user short call (base collateral) exposure\n        uint shortCallBase;\n        // total user short call (quote collateral) exposure\n        uint shortCallQuote;\n        // total user long put exposure\n        uint longPut;\n        // total user short put (quote collateral) exposure\n        uint shortPut;\n        // id of board to which strike belongs\n        uint boardId;\n    }\n\n    struct OptionBoard {\n        // board identifier\n        uint id;\n        // expiry of all strikes belonging to board\n        uint expiry;\n        // volatility component specific to board (boardIv * skew = vol of strike)\n        uint iv;\n        // admin settable flag blocking all trading on this board\n        bool frozen;\n        // list of all strikes belonging to this board\n        uint[] strikeIds;\n    }\n\n    struct TradeInputParameters {\n        // id of strike\n        uint strikeId;\n        // OptionToken ERC721 id for position (set to 0 for new positions)\n        uint positionId;\n        // number of sub-orders to break order into (reduces slippage)\n        uint iterations;\n        // type of option to trade\n        OptionType optionType;\n        // number of contracts to trade\n        uint amount;\n        // final amount of collateral to leave in OptionToken position\n        uint setCollateralTo;\n        // revert trade if totalCost is below this value\n        uint minTotalCost;\n        // revert trade if totalCost is above this value\n        uint maxTotalCost;\n        // referrer emitted in Trade event, no on-chain interaction\n        address referrer;\n    }\n\n    struct TradeParameters {\n        bool isBuy;\n        bool isForceClose;\n        TradeDirection tradeDirection;\n        OptionType optionType;\n        uint amount;\n        uint expiry;\n        uint strikePrice;\n        uint spotPrice;\n        ILiquidityPool.Liquidity liquidity;\n    }\n\n    struct Result {\n        uint positionId;\n        uint totalCost;\n        uint totalFee;\n    }\n\n    function getStrikeAndBoard(uint strikeId) external view returns (Strike memory, OptionBoard memory);\n    function closePosition(TradeInputParameters memory params) external returns (Result memory result);\n    function forceClosePosition(TradeInputParameters memory params) external returns (Result memory result);\n    function quoteAsset() external view returns (address);\n}\n\ninterface IOptionToken is IERC721 {\n    enum PositionState {\n        EMPTY,\n        ACTIVE,\n        CLOSED,\n        LIQUIDATED,\n        SETTLED,\n        MERGED\n    }\n\n    struct OptionPosition {\n        uint positionId;\n        uint strikeId;\n        IOptionMarket.OptionType optionType;\n        uint amount;\n        uint collateral;\n        PositionState state;\n    }\n    function getOptionPosition(uint positionId) external view returns (OptionPosition memory);\n}\n\n/**\n * @title StopOrder\n * @notice This contract allows users to set and execute stop orders on ERC721 tokens.\n * Users can set a price target, and when the target is met, the contract automatically\n * executes the order and sends the profit to the user.\n * @dev The contract utilizes Chainlink price feeds, Lyra options protocol, and an exchange adapter for executing orders.\n */\ncontract StopOrder is Ownable {\n    // Enum for specifying the type of the stop order\n    enum OrderType { GreaterThanOrEqual, LessThanOrEqual }\n\n    // TokenInfo struct to store information related to a token for which a stop order is set\n    struct TokenInfo {\n        uint256 tokenId;\n        uint256 stopOrderPrice;\n        uint256 expirationTime;\n        address owner;\n        OrderType stopOrderType;\n        uint256 commissionPaid;\n    }\n\n    // Mappings for storing tokenId related data, active stop orders, and their indices\n    mapping(uint256 => TokenInfo) public tokenIdToTokenInfo;\n    uint256 public commissionSize = 0.001 * 1e18;\n    uint256 public withdrawableBalance;\n    address public rewardAddress;\n    uint256 private activeStopCount;\n    uint256 public maxActiveStopOrders = 200;\n    mapping(uint256 => uint256) public indexTokenToTokenId;\n    mapping(uint256 => uint256) public idTokenToIndexToken;\n\n    // Contract instances for price feeds, exchange adapter, and Lyra options protocol\n    AggregatorV3Interface public priceProvider;\n    IOptionMarket public optionMarket;\n    IOptionToken public optionToken;\n    \n    // Events to emit when a stop order is set, deleted, updated, or executed\n    event StopOrderSet(uint256 indexed tokenId, uint256 stopOrderPrice, OrderType stopOrderType);\n    event StopOrderDeleted(uint256 indexed tokenId);\n    event StopOrderUpdated(uint256 indexed tokenId, uint256 newStopOrderPrice, OrderType newStopOrderType);\n    event StopOrderExecuted(uint256 indexed tokenId);\n\n    // Constructor to initialize the contract with the required ERC721 contract and operational treasury addresses\n    constructor(\n        address _priceProvider,\n        address _optionMarket,\n        address _optionToken\n    ) {\n        priceProvider = AggregatorV3Interface(_priceProvider);\n        optionMarket = IOptionMarket(_optionMarket);\n        optionToken = IOptionToken(_optionToken);\n    }\n\n    // Function to set the commission size\n    function setCommissionSize(uint256 newCommissionSize) external onlyOwner {\n        commissionSize = newCommissionSize;\n    }\n\n    function setRewardAddress(address newRewardAddress) external onlyOwner {\n        rewardAddress = newRewardAddress;\n    }\n\n    // Function to set the maximum number of active stop orders\n    function setMaxActiveStopOrders(uint256 newMaxActiveStopOrders) external onlyOwner {\n        maxActiveStopOrders = newMaxActiveStopOrders;\n    }\n\n    // Function for the contract owner to withdraw the profit\n    function withdrawProfit() external onlyOwner {\n        uint256 contractBalance = address(this).balance;\n        require(contractBalance > withdrawableBalance, \"No profit available to withdraw\");\n\n        uint256 profit = contractBalance - withdrawableBalance;\n        withdrawableBalance = contractBalance - profit;\n        payable(owner()).transfer(profit);\n    }\n\n    // Function to get the count of active stop orders\n    function getActiveStopCount() external view returns (uint256) {\n        return activeStopCount;\n    }\n\n    // Function to set a stop order\n    function setStopOrder(\n        uint256 tokenId,\n        uint256 stopOrderPrice,\n        OrderType stopOrderType\n    ) external payable {\n        require(optionToken.ownerOf(tokenId) == msg.sender, \"Caller must be the owner of the token\");\n        require(msg.value >= commissionSize, \"Not enough commission sent\");\n\n        IOptionMarket.OptionType optionType = getOptionType(tokenId);\n\n        require(optionType == IOptionMarket.OptionType.LONG_CALL || optionType == IOptionMarket.OptionType.LONG_PUT, \"invalid type\");\n\n        uint256 refund = msg.value - commissionSize;\n        if (refund > 0) {\n            payable(msg.sender).transfer(refund);\n        }\n        withdrawableBalance += commissionSize;\n\n        // Add token to the active list\n        activeStopCount++;\n        indexTokenToTokenId[activeStopCount] = tokenId;\n        idTokenToIndexToken[tokenId] = activeStopCount;\n\n        optionToken.transferFrom(msg.sender, address(this), tokenId);\n        uint256 expirationTime = getExpirationTime(tokenId);\n        tokenIdToTokenInfo[tokenId] = TokenInfo(\n            tokenId,\n            stopOrderPrice,\n            expirationTime,\n            msg.sender,\n            stopOrderType,\n            commissionSize\n        );\n\n        emit StopOrderSet(tokenId, stopOrderPrice, stopOrderType);\n    }\n\n    // Function to delete a stop order\n    function deleteStopOrder(uint256 tokenId) external {\n        TokenInfo memory tokenInfo = tokenIdToTokenInfo[tokenId];\n        require(tokenInfo.owner == msg.sender, \"Caller must be the owner of the token\");\n        require(tokenInfo.expirationTime > 0, \"No token set for stop order\");\n\n        uint256 commissionToReturn = tokenInfo.commissionPaid;\n        withdrawableBalance -= commissionToReturn;\n        payable(msg.sender).transfer(commissionToReturn);\n\n        // Remove token from the active list\n        _removeTokenFromActiveList(tokenId);\n\n        delete tokenIdToTokenInfo[tokenId];\n        optionToken.transferFrom(address(this), msg.sender, tokenId);\n\n        emit StopOrderDeleted(tokenId);\n    }\n\n    // Function to update a stop order\n    function updateStopOrder(\n        uint256 tokenId,\n        uint256 newStopOrderPrice,\n        OrderType newStopOrderType\n    ) external {\n        TokenInfo storage tokenInfo = tokenIdToTokenInfo[tokenId];\n        require(tokenInfo.owner == msg.sender, \"Caller must be the owner of the token\");\n\n        tokenInfo.stopOrderPrice = newStopOrderPrice;\n        tokenInfo.stopOrderType = newStopOrderType;\n\n        emit StopOrderUpdated(tokenId, newStopOrderPrice, newStopOrderType);\n    }\n\n    // Function to execute a stop order\n    function executeStopOrder(uint256 tokenId) external {\n        TokenInfo memory tokenInfo = tokenIdToTokenInfo[tokenId];\n        require(checkStopOrder(tokenId), \"Stop order conditions not met\");\n\n        uint256 commissionToReturn = tokenInfo.commissionPaid;\n        withdrawableBalance -= commissionToReturn;\n\n        // Remove token from the active list\n        _removeTokenFromActiveList(tokenId);\n\n        delete tokenIdToTokenInfo[tokenId];\n        IERC20 quoteAsset = IERC20(optionMarket.quoteAsset());\n        uint256 balanceBefore = quoteAsset.balanceOf(address(this));\n        closeOrForceClosePosition(tokenInfo);\n        quoteAsset.transfer(tokenInfo.owner, quoteAsset.balanceOf(address(this)) - balanceBefore);\n\n\n        emit StopOrderExecuted(tokenId);\n    }\n\n    // Function to check if the conditions for a stop order are met\n    function checkStopOrder(uint256 tokenId) public view returns (bool) {\n        TokenInfo memory tokenInfo = tokenIdToTokenInfo[tokenId];\n        if (tokenInfo.expirationTime == 0) {\n            return false;\n        }\n        uint256 currentPrice = getCurrentPrice();\n        bool stopOrderTriggered = false;\n        if (tokenInfo.stopOrderType == OrderType.GreaterThanOrEqual) {\n            stopOrderTriggered = currentPrice >= tokenInfo.stopOrderPrice;\n        } else if (tokenInfo.stopOrderType == OrderType.LessThanOrEqual) {\n            stopOrderTriggered = currentPrice <= tokenInfo.stopOrderPrice;\n        }\n        return stopOrderTriggered;\n    }\n    \n    function _removeTokenFromActiveList(uint256 tokenId) private {\n        uint256 indexToRemove = idTokenToIndexToken[tokenId];\n        uint256 lastTokenId = indexTokenToTokenId[activeStopCount];\n\n        // Move the last token to the removed token's position\n        indexTokenToTokenId[indexToRemove] = lastTokenId;\n        idTokenToIndexToken[lastTokenId] = indexToRemove;\n\n        // Remove the last token from the active list\n        delete indexTokenToTokenId[activeStopCount];\n        delete idTokenToIndexToken[tokenId];\n        activeStopCount--;\n    }\n\n    // Function to get the current price of a specific token\n    function getCurrentPrice() public view returns (uint256) {\n        (, int256 latestPrice, , , ) = AggregatorV3Interface(priceProvider).latestRoundData();\n        require(latestPrice > 0, \"Price should be >= 0\");\n        return uint256(latestPrice);\n    }\n\n    function getExpirationTime(uint256 tokenId) internal view returns (uint256) {\n        IOptionToken.OptionPosition memory positionInfo = optionToken.getOptionPosition(tokenId);\n        (, IOptionMarket.OptionBoard memory optBoard) = optionMarket.getStrikeAndBoard(positionInfo.strikeId);\n        return optBoard.expiry;\n    }\n\n    function closeOrForceClosePosition(TokenInfo memory tokenInfo) internal {\n        IOptionToken.OptionPosition memory positionInfo = optionToken.getOptionPosition(tokenInfo.tokenId);\n        IOptionMarket.TradeInputParameters memory params = IOptionMarket.TradeInputParameters(\n            positionInfo.strikeId,\n            positionInfo.positionId,\n            1,\n            IOptionMarket.OptionType(uint256(positionInfo.optionType)),\n            positionInfo.amount,\n            0,\n            0,\n            type(uint128).max,\n            rewardAddress\n        );\n\n        try optionMarket.closePosition(params) {\n        } catch (bytes memory err) {\n            if (checkForceCloseErrors(err)) {\n                optionMarket.forceClosePosition(params);\n            } else {\n                revert(abi.decode(err, (string)));\n            }\n        }\n    }\n\n    function checkForceCloseErrors(bytes memory err) private pure returns (bool isForce) {\n        if (\n            keccak256(abi.encodeWithSignature('TradingCutoffReached(address,uint256,uint256,uint256)')) == keccak256(getFirstFourBytes(err)) ||\n            keccak256(abi.encodeWithSignature('TradeDeltaOutOfRange(address,int256,int256,int256)')) == keccak256(getFirstFourBytes(err)) \n        ) return true;\n    }\n\n    function getFirstFourBytes(bytes memory data) public pure returns (bytes memory) {\n        require(data.length >= 4, \"Data should be at least 4 bytes long.\");\n        \n        bytes memory result = new bytes(4);\n        for (uint i = 0; i < 4; i++) {\n            result[i] = data[i];\n        }\n        \n        return result;\n    }\n\n    function getOptionType(uint256 tokenId) internal view returns (IOptionMarket.OptionType) {\n        IOptionToken.OptionPosition memory positionInfo = optionToken.getOptionPosition(tokenId);\n        return positionInfo.optionType;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}