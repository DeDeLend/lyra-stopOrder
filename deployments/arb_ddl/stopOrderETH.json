{
  "address": "0x06a6815b91c88BDa19832Ada861077e123C34FFb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_optionMarket",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_optionToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "StopOrderDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "StopOrderExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "StopOrderIssue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stopOrderPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum StopOrder.OrderType",
          "name": "stopOrderType",
          "type": "uint8"
        }
      ],
      "name": "StopOrderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStopOrderPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum StopOrder.OrderType",
          "name": "newStopOrderType",
          "type": "uint8"
        }
      ],
      "name": "StopOrderUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkExpire",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkStopOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commissionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deleteStopOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "executeStopOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveStopCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getFirstFourBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idTokenToIndexToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "indexTokenToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxActiveStopOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionMarket",
      "outputs": [
        {
          "internalType": "contract IOptionMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionToken",
      "outputs": [
        {
          "internalType": "contract IOptionToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCommissionSize",
          "type": "uint256"
        }
      ],
      "name": "setCommissionSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxActiveStopOrders",
          "type": "uint256"
        }
      ],
      "name": "setMaxActiveStopOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRewardAddress",
          "type": "address"
        }
      ],
      "name": "setRewardAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopOrderPrice",
          "type": "uint256"
        },
        {
          "internalType": "enum StopOrder.OrderType",
          "name": "stopOrderType",
          "type": "uint8"
        }
      ],
      "name": "setStopOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToTokenInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopOrderPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "enum StopOrder.OrderType",
          "name": "stopOrderType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "commissionPaid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newStopOrderPrice",
          "type": "uint256"
        },
        {
          "internalType": "enum StopOrder.OrderType",
          "name": "newStopOrderType",
          "type": "uint8"
        }
      ],
      "name": "updateStopOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfbf4e078dbf1e26231b3fde3fe4dd2b1bbbb35710eff393c065d3a4c0500f517",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x06a6815b91c88BDa19832Ada861077e123C34FFb",
    "transactionIndex": 1,
    "gasUsed": "13315126",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000c00008000000000000000000000000000000000400000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbeb8007fa47068f7c41a2b5ee7cf56d15dac14264630148ec0302f00d3ae7f83",
    "transactionHash": "0xfbf4e078dbf1e26231b3fde3fe4dd2b1bbbb35710eff393c065d3a4c0500f517",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 104314084,
        "transactionHash": "0xfbf4e078dbf1e26231b3fde3fe4dd2b1bbbb35710eff393c065d3a4c0500f517",
        "address": "0x06a6815b91c88BDa19832Ada861077e123C34FFb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbeb8007fa47068f7c41a2b5ee7cf56d15dac14264630148ec0302f00d3ae7f83"
      }
    ],
    "blockNumber": 104314084,
    "cumulativeGasUsed": "13315126",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x639fe6ab55c921f74e7fac1ee960c0b6293ba612",
    "0x919E5e0C096002cb8a21397D724C4e3EbE77bC15",
    "0xe485155ce647157624C5E2A41db45A9CC88098c3"
  ],
  "numDeployments": 2,
  "solcInputHash": "c20be40a4653c18459f568f67498b934",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_optionMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_optionToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StopOrderDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StopOrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StopOrderIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopOrderPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StopOrder.OrderType\",\"name\":\"stopOrderType\",\"type\":\"uint8\"}],\"name\":\"StopOrderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStopOrderPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StopOrder.OrderType\",\"name\":\"newStopOrderType\",\"type\":\"uint8\"}],\"name\":\"StopOrderUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkExpire\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkStopOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deleteStopOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"executeStopOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveStopCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getFirstFourBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idTokenToIndexToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexTokenToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxActiveStopOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionMarket\",\"outputs\":[{\"internalType\":\"contract IOptionMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionToken\",\"outputs\":[{\"internalType\":\"contract IOptionToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCommissionSize\",\"type\":\"uint256\"}],\"name\":\"setCommissionSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxActiveStopOrders\",\"type\":\"uint256\"}],\"name\":\"setMaxActiveStopOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardAddress\",\"type\":\"address\"}],\"name\":\"setRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopOrderPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum StopOrder.OrderType\",\"name\":\"stopOrderType\",\"type\":\"uint8\"}],\"name\":\"setStopOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopOrderPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum StopOrder.OrderType\",\"name\":\"stopOrderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"commissionPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStopOrderPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum StopOrder.OrderType\",\"name\":\"newStopOrderType\",\"type\":\"uint8\"}],\"name\":\"updateStopOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The contract utilizes Chainlink price feeds, Lyra options protocol, and an exchange adapter for executing orders.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"StopOrder\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract allows users to set and execute stop orders on ERC721 tokens. Users can set a price target, and when the target is met, the contract automatically executes the order and sends the profit to the user.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StopOrder.sol\":\"StopOrder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/StopOrder.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * DeDeLend\\n * Copyright (C) 2023 DeDeLend\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n\\ninterface ILiquidityPool {\\n    struct Liquidity {\\n        // Amount of liquidity available for option collateral and premiums\\n        uint freeLiquidity;\\n        // Amount of liquidity available for withdrawals - different to freeLiquidity\\n        uint burnableLiquidity;\\n        // Amount of liquidity reserved for long options sold to traders\\n        uint reservedCollatLiquidity;\\n        // Portion of liquidity reserved for delta hedging (quote outstanding)\\n        uint pendingDeltaLiquidity;\\n        // Current value of delta hedge\\n        uint usedDeltaLiquidity;\\n        // Net asset value, including everything and netOptionValue\\n        uint NAV;\\n        // longs scaled down by this factor in a contract adjustment event\\n        uint longScaleFactor;\\n    }\\n}\\n\\ninterface IOptionMarket {\\n    enum OptionType {\\n        LONG_CALL,\\n        LONG_PUT,\\n        SHORT_CALL_BASE,\\n        SHORT_CALL_QUOTE,\\n        SHORT_PUT_QUOTE\\n    }\\n\\n    enum TradeDirection {\\n        OPEN,\\n        CLOSE,\\n        LIQUIDATE\\n    }\\n\\n    struct Strike {\\n        // strike listing identifier\\n        uint id;\\n        // strike price\\n        uint strikePrice;\\n        // volatility component specific to the strike listing (boardIv * skew = vol of strike)\\n        uint skew;\\n        // total user long call exposure\\n        uint longCall;\\n        // total user short call (base collateral) exposure\\n        uint shortCallBase;\\n        // total user short call (quote collateral) exposure\\n        uint shortCallQuote;\\n        // total user long put exposure\\n        uint longPut;\\n        // total user short put (quote collateral) exposure\\n        uint shortPut;\\n        // id of board to which strike belongs\\n        uint boardId;\\n    }\\n\\n    struct OptionBoard {\\n        // board identifier\\n        uint id;\\n        // expiry of all strikes belonging to board\\n        uint expiry;\\n        // volatility component specific to board (boardIv * skew = vol of strike)\\n        uint iv;\\n        // admin settable flag blocking all trading on this board\\n        bool frozen;\\n        // list of all strikes belonging to this board\\n        uint[] strikeIds;\\n    }\\n\\n    struct TradeInputParameters {\\n        // id of strike\\n        uint strikeId;\\n        // OptionToken ERC721 id for position (set to 0 for new positions)\\n        uint positionId;\\n        // number of sub-orders to break order into (reduces slippage)\\n        uint iterations;\\n        // type of option to trade\\n        OptionType optionType;\\n        // number of contracts to trade\\n        uint amount;\\n        // final amount of collateral to leave in OptionToken position\\n        uint setCollateralTo;\\n        // revert trade if totalCost is below this value\\n        uint minTotalCost;\\n        // revert trade if totalCost is above this value\\n        uint maxTotalCost;\\n        // referrer emitted in Trade event, no on-chain interaction\\n        address referrer;\\n    }\\n\\n    struct TradeParameters {\\n        bool isBuy;\\n        bool isForceClose;\\n        TradeDirection tradeDirection;\\n        OptionType optionType;\\n        uint amount;\\n        uint expiry;\\n        uint strikePrice;\\n        uint spotPrice;\\n        ILiquidityPool.Liquidity liquidity;\\n    }\\n\\n    struct Result {\\n        uint positionId;\\n        uint totalCost;\\n        uint totalFee;\\n    }\\n\\n    function getStrikeAndBoard(uint strikeId) external view returns (Strike memory, OptionBoard memory);\\n    function closePosition(TradeInputParameters memory params) external returns (Result memory result);\\n    function forceClosePosition(TradeInputParameters memory params) external returns (Result memory result);\\n    function quoteAsset() external view returns (address);\\n}\\n\\ninterface IOptionToken is IERC721 {\\n    enum PositionState {\\n        EMPTY,\\n        ACTIVE,\\n        CLOSED,\\n        LIQUIDATED,\\n        SETTLED,\\n        MERGED\\n    }\\n\\n    struct OptionPosition {\\n        uint positionId;\\n        uint strikeId;\\n        IOptionMarket.OptionType optionType;\\n        uint amount;\\n        uint collateral;\\n        PositionState state;\\n    }\\n    function getOptionPosition(uint positionId) external view returns (OptionPosition memory);\\n}\\n\\n/**\\n * @title StopOrder\\n * @notice This contract allows users to set and execute stop orders on ERC721 tokens.\\n * Users can set a price target, and when the target is met, the contract automatically\\n * executes the order and sends the profit to the user.\\n * @dev The contract utilizes Chainlink price feeds, Lyra options protocol, and an exchange adapter for executing orders.\\n */\\ncontract StopOrder is Ownable {\\n    // Enum for specifying the type of the stop order\\n    enum OrderType { GreaterThanOrEqual, LessThanOrEqual }\\n\\n    // TokenInfo struct to store information related to a token for which a stop order is set\\n    struct TokenInfo {\\n        uint256 tokenId;\\n        uint256 stopOrderPrice;\\n        uint256 expirationTime;\\n        address owner;\\n        OrderType stopOrderType;\\n        uint256 commissionPaid;\\n    }\\n\\n    // Mappings for storing tokenId related data, active stop orders, and their indices\\n    mapping(uint256 => TokenInfo) public tokenIdToTokenInfo;\\n    uint256 public commissionSize = 0.001 * 1e18;\\n    uint256 public withdrawableBalance;\\n    address public rewardAddress;\\n    uint256 private activeStopCount;\\n    uint256 public maxActiveStopOrders = 200;\\n    mapping(uint256 => uint256) public indexTokenToTokenId;\\n    mapping(uint256 => uint256) public idTokenToIndexToken;\\n\\n    // Contract instances for price feeds, exchange adapter, and Lyra options protocol\\n    AggregatorV3Interface public priceProvider;\\n    IOptionMarket public optionMarket;\\n    IOptionToken public optionToken;\\n    \\n    // Events to emit when a stop order is set, deleted, updated, or executed\\n    event StopOrderSet(uint256 indexed tokenId, uint256 stopOrderPrice, OrderType stopOrderType);\\n    event StopOrderDeleted(uint256 indexed tokenId);\\n    event StopOrderIssue(uint256 indexed tokenId);\\n    event StopOrderUpdated(uint256 indexed tokenId, uint256 newStopOrderPrice, OrderType newStopOrderType);\\n    event StopOrderExecuted(uint256 indexed tokenId);\\n\\n    // Constructor to initialize the contract with the required ERC721 contract and operational treasury addresses\\n    constructor(\\n        address _priceProvider,\\n        address _optionMarket,\\n        address _optionToken\\n    ) {\\n        priceProvider = AggregatorV3Interface(_priceProvider);\\n        optionMarket = IOptionMarket(_optionMarket);\\n        optionToken = IOptionToken(_optionToken);\\n    }\\n\\n    ////////////////\\n    // ONLY OWNER //\\n    ////////////////\\n\\n    // Function to set the commission size\\n    function setCommissionSize(uint256 newCommissionSize) external onlyOwner {\\n        commissionSize = newCommissionSize;\\n    }\\n\\n    function setRewardAddress(address newRewardAddress) external onlyOwner {\\n        rewardAddress = newRewardAddress;\\n    }\\n\\n    // Function to set the maximum number of active stop orders\\n    function setMaxActiveStopOrders(uint256 newMaxActiveStopOrders) external onlyOwner {\\n        maxActiveStopOrders = newMaxActiveStopOrders;\\n    }\\n\\n    // Function for the contract owner to withdraw the profit\\n    function withdrawProfit() external onlyOwner {\\n        uint256 contractBalance = address(this).balance;\\n        require(contractBalance > withdrawableBalance, \\\"No profit available to withdraw\\\");\\n\\n        uint256 profit = contractBalance - withdrawableBalance;\\n        withdrawableBalance = contractBalance - profit;\\n        payable(owner()).transfer(profit);\\n    }\\n\\n    //////////\\n    // VIEW //\\n    //////////\\n\\n    // Function to get the count of active stop orders\\n    function getActiveStopCount() external view returns (uint256) {\\n        return activeStopCount;\\n    }\\n\\n    function checkExpire(uint256 tokenId) public view returns (bool) {\\n        TokenInfo memory tokenInfo = tokenIdToTokenInfo[tokenId];\\n        return block.timestamp + 30 minutes >= tokenInfo.expirationTime;\\n    }\\n\\n    // Function to check if the conditions for a stop order are met\\n    function checkStopOrder(uint256 tokenId) public view returns (bool) {\\n        if (checkExpire(tokenId)) {\\n            return true;\\n        }\\n        TokenInfo memory tokenInfo = tokenIdToTokenInfo[tokenId];\\n        if (tokenInfo.expirationTime == 0) {\\n            return false;\\n        }\\n        uint256 currentPrice = getCurrentPrice();\\n        bool stopOrderTriggered = false;\\n        if (tokenInfo.stopOrderType == OrderType.GreaterThanOrEqual) {\\n            stopOrderTriggered = currentPrice >= tokenInfo.stopOrderPrice;\\n        } else if (tokenInfo.stopOrderType == OrderType.LessThanOrEqual) {\\n            stopOrderTriggered = currentPrice <= tokenInfo.stopOrderPrice;\\n        }\\n        return stopOrderTriggered;\\n    }    \\n\\n    // Function to get the current price of a specific token\\n    function getCurrentPrice() public view returns (uint256) {\\n        (, int256 latestPrice, , , ) = AggregatorV3Interface(priceProvider).latestRoundData();\\n        require(latestPrice > 0, \\\"Price should be >= 0\\\");\\n        return uint256(latestPrice);\\n    }\\n\\n    function getExpirationTime(uint256 tokenId) internal view returns (uint256) {\\n        IOptionToken.OptionPosition memory positionInfo = optionToken.getOptionPosition(tokenId);\\n        (, IOptionMarket.OptionBoard memory optBoard) = optionMarket.getStrikeAndBoard(positionInfo.strikeId);\\n        return optBoard.expiry;\\n    }\\n\\n    function getOptionType(uint256 tokenId) internal view returns (IOptionMarket.OptionType) {\\n        IOptionToken.OptionPosition memory positionInfo = optionToken.getOptionPosition(tokenId);\\n        return positionInfo.optionType;\\n    }   \\n\\n    //////////\\n    // PURE //\\n    ////////// \\n\\n    function checkForceCloseErrors(bytes memory err) private pure returns (bool isForce) {\\n        if (\\n            keccak256(abi.encodeWithSignature('TradingCutoffReached(address,uint256,uint256,uint256)')) == keccak256(getFirstFourBytes(err)) ||\\n            keccak256(abi.encodeWithSignature('TradeDeltaOutOfRange(address,int256,int256,int256)')) == keccak256(getFirstFourBytes(err)) \\n        ) return true;\\n    }\\n\\n    function getFirstFourBytes(bytes memory data) public pure returns (bytes memory) {\\n        require(data.length >= 4, \\\"Data should be at least 4 bytes long.\\\");\\n        \\n        bytes memory result = new bytes(4);\\n        for (uint i = 0; i < 4; i++) {\\n            result[i] = data[i];\\n        }\\n        \\n        return result;\\n    }\\n\\n    /////////////\\n    // PRIVATE //\\n    /////////////\\n\\n    function _deleteStopOrder(uint256 tokenId) private {\\n        TokenInfo memory tokenInfo = tokenIdToTokenInfo[tokenId];\\n        require(tokenInfo.expirationTime > 0, \\\"No token set for stop order\\\");\\n\\n        uint256 commissionToReturn = tokenInfo.commissionPaid;\\n        withdrawableBalance -= commissionToReturn;\\n        payable(msg.sender).transfer(commissionToReturn);\\n\\n        // Remove token from the active list\\n        _removeTokenFromActiveList(tokenId);\\n\\n        delete tokenIdToTokenInfo[tokenId];\\n        optionToken.transferFrom(address(this), tokenInfo.owner, tokenId);\\n    }\\n\\n    function issueStopOrder(uint256 tokenId) private {\\n        _deleteStopOrder(tokenId);\\n\\n        emit StopOrderIssue(tokenId);\\n    }\\n\\n    function _removeTokenFromActiveList(uint256 tokenId) private {\\n        uint256 indexToRemove = idTokenToIndexToken[tokenId];\\n        uint256 lastTokenId = indexTokenToTokenId[activeStopCount];\\n\\n        // Move the last token to the removed token's position\\n        indexTokenToTokenId[indexToRemove] = lastTokenId;\\n        idTokenToIndexToken[lastTokenId] = indexToRemove;\\n\\n        // Remove the last token from the active list\\n        delete indexTokenToTokenId[activeStopCount];\\n        delete idTokenToIndexToken[tokenId];\\n        activeStopCount--;\\n    }\\n\\n    function closeOrForceClosePosition(TokenInfo memory tokenInfo) private {\\n        IOptionToken.OptionPosition memory positionInfo = optionToken.getOptionPosition(tokenInfo.tokenId);\\n        IOptionMarket.TradeInputParameters memory params = IOptionMarket.TradeInputParameters(\\n            positionInfo.strikeId,\\n            positionInfo.positionId,\\n            1,\\n            IOptionMarket.OptionType(uint256(positionInfo.optionType)),\\n            positionInfo.amount,\\n            0,\\n            0,\\n            type(uint128).max,\\n            rewardAddress\\n        );\\n\\n        try optionMarket.closePosition(params) {\\n        } catch (bytes memory err) {\\n            if (checkForceCloseErrors(err)) {\\n                optionMarket.forceClosePosition(params);\\n            } else {\\n                revert(abi.decode(err, (string)));\\n            }\\n        }\\n    }    \\n\\n    //////////////\\n    // EXTERNAL //\\n    //////////////\\n\\n    // Function to set a stop order\\n    function setStopOrder(\\n        uint256 tokenId,\\n        uint256 stopOrderPrice,\\n        OrderType stopOrderType\\n    ) external payable {\\n        require(optionToken.ownerOf(tokenId) == msg.sender, \\\"Caller must be the owner of the token\\\");\\n        require(msg.value >= commissionSize, \\\"Not enough commission sent\\\");\\n\\n        IOptionMarket.OptionType optionType = getOptionType(tokenId);\\n\\n        require(optionType == IOptionMarket.OptionType.LONG_CALL || optionType == IOptionMarket.OptionType.LONG_PUT, \\\"invalid type\\\");\\n\\n        uint256 refund = msg.value - commissionSize;\\n        if (refund > 0) {\\n            payable(msg.sender).transfer(refund);\\n        }\\n        withdrawableBalance += commissionSize;\\n\\n        // Add token to the active list\\n        activeStopCount++;\\n        indexTokenToTokenId[activeStopCount] = tokenId;\\n        idTokenToIndexToken[tokenId] = activeStopCount;\\n\\n        optionToken.transferFrom(msg.sender, address(this), tokenId);\\n        uint256 expirationTime = getExpirationTime(tokenId);\\n        tokenIdToTokenInfo[tokenId] = TokenInfo(\\n            tokenId,\\n            stopOrderPrice,\\n            expirationTime,\\n            msg.sender,\\n            stopOrderType,\\n            commissionSize\\n        );\\n\\n        emit StopOrderSet(tokenId, stopOrderPrice, stopOrderType);\\n    }\\n\\n    // Function to delete a stop order\\n    function deleteStopOrder(uint256 tokenId) external {\\n        TokenInfo memory tokenInfo = tokenIdToTokenInfo[tokenId];\\n        require(tokenInfo.owner == msg.sender, \\\"Caller must be the owner of the token\\\");\\n        _deleteStopOrder(tokenId);\\n\\n        emit StopOrderDeleted(tokenId);\\n    }\\n\\n    // Function to update a stop order\\n    function updateStopOrder(\\n        uint256 tokenId,\\n        uint256 newStopOrderPrice,\\n        OrderType newStopOrderType\\n    ) external {\\n        TokenInfo storage tokenInfo = tokenIdToTokenInfo[tokenId];\\n        require(tokenInfo.owner == msg.sender, \\\"Caller must be the owner of the token\\\");\\n\\n        tokenInfo.stopOrderPrice = newStopOrderPrice;\\n        tokenInfo.stopOrderType = newStopOrderType;\\n\\n        emit StopOrderUpdated(tokenId, newStopOrderPrice, newStopOrderType);\\n    }\\n\\n    // Function to execute a stop order\\n    function executeStopOrder(uint256 tokenId) external {\\n        if (checkExpire(tokenId)) {\\n            issueStopOrder(tokenId);\\n        } else {\\n            TokenInfo memory tokenInfo = tokenIdToTokenInfo[tokenId];\\n            require(checkStopOrder(tokenId), \\\"Stop order conditions not met\\\");\\n\\n            uint256 commissionToReturn = tokenInfo.commissionPaid;\\n            withdrawableBalance -= commissionToReturn;\\n\\n            // Remove token from the active list\\n            _removeTokenFromActiveList(tokenId);\\n\\n            delete tokenIdToTokenInfo[tokenId];\\n            IERC20 quoteAsset = IERC20(optionMarket.quoteAsset());\\n            uint256 balanceBefore = quoteAsset.balanceOf(address(this));\\n            closeOrForceClosePosition(tokenInfo);\\n            quoteAsset.transfer(tokenInfo.owner, quoteAsset.balanceOf(address(this)) - balanceBefore);\\n\\n            emit StopOrderExecuted(tokenId);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfb640b325b889e1fb1965b37e33eabd0a5e745669e089b656f9c502e2d6fcc52\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c6800060025560c86006553480156200002157600080fd5b5060405162003e1338038062003e13833981810160405281019062000047919062000269565b620000676200005b6200013360201b60201c565b6200013b60201b60201c565b82600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620002c5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002318262000204565b9050919050565b620002438162000224565b81146200024f57600080fd5b50565b600081519050620002638162000238565b92915050565b600080600060608486031215620002855762000284620001ff565b5b6000620002958682870162000252565b9350506020620002a88682870162000252565b9250506040620002bb8682870162000252565b9150509250925092565b613b3e80620002d56000396000f3fe6080604052600436106101815760003560e01c80639ed5d1d8116100d1578063bb4a9f881161008a578063e5b7eadf11610064578063e5b7eadf14610568578063e62d64f614610591578063eb91d37e146105bc578063f2fde38b146105e757610181565b8063bb4a9f88146104c3578063d07d0b66146104ee578063e233ac581461052b57610181565b80639ed5d1d8146103b3578063a4cbf5f4146103dc578063b02e044814610419578063b116487a14610442578063b30e1be81461046d578063b888879e1461049857610181565b80635fb8bcd51161013e57806386d36c9a1161011857806386d36c9a146103095780638cf57cb9146103465780638da5cb5b14610371578063959499b61461039c57610181565b80635fb8bcd514610287578063715018a6146102c957806378257f66146102e057610181565b80631d2f6b7d1461018657806324e5eacd146101af5780632bab754b146101da5780632d5181601461020557806340eb5502146102425780635e00e6791461025e575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a891906125f3565b610610565b005b3480156101bb57600080fd5b506101c4610797565b6040516101d1919061262f565b60405180910390f35b3480156101e657600080fd5b506101ef6107a1565b6040516101fc91906126c9565b60405180910390f35b34801561021157600080fd5b5061022c600480360381019061022791906125f3565b6107c7565b604051610239919061262f565b60405180910390f35b61025c60048036038101906102579190612709565b6107df565b005b34801561026a57600080fd5b506102856004803603810190610280919061279a565b610c95565b005b34801561029357600080fd5b506102ae60048036038101906102a991906125f3565b610ce1565b6040516102c09695949392919061284d565b60405180910390f35b3480156102d557600080fd5b506102de610d4a565b005b3480156102ec57600080fd5b50610307600480360381019061030291906125f3565b610d5e565b005b34801561031557600080fd5b50610330600480360381019061032b91906125f3565b6111cd565b60405161033d91906128c9565b60405180910390f35b34801561035257600080fd5b5061035b61136d565b60405161036891906128e4565b60405180910390f35b34801561037d57600080fd5b50610386611393565b60405161039391906128e4565b60405180910390f35b3480156103a857600080fd5b506103b16113bc565b005b3480156103bf57600080fd5b506103da60048036038101906103d591906125f3565b611483565b005b3480156103e857600080fd5b5061040360048036038101906103fe91906125f3565b611495565b60405161041091906128c9565b60405180910390f35b34801561042557600080fd5b50610440600480360381019061043b91906125f3565b61158e565b005b34801561044e57600080fd5b506104576115a0565b604051610464919061262f565b60405180910390f35b34801561047957600080fd5b506104826115a6565b60405161048f919061262f565b60405180910390f35b3480156104a457600080fd5b506104ad6115ac565b6040516104ba9190612920565b60405180910390f35b3480156104cf57600080fd5b506104d86115d2565b6040516104e5919061295c565b60405180910390f35b3480156104fa57600080fd5b5061051560048036038101906105109190612abd565b6115f8565b6040516105229190612b8e565b60405180910390f35b34801561053757600080fd5b50610552600480360381019061054d91906125f3565b61171a565b60405161055f919061262f565b60405180910390f35b34801561057457600080fd5b5061058f600480360381019061058a9190612709565b611732565b005b34801561059d57600080fd5b506105a6611850565b6040516105b3919061262f565b60405180910390f35b3480156105c857600080fd5b506105d1611856565b6040516105de919061262f565b60405180910390f35b3480156105f357600080fd5b5061060e6004803603810190610609919061279a565b611949565b005b6000600160008381526020019081526020016000206040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff1660018111156106c9576106c86127d6565b5b60018111156106db576106da6127d6565b5b815260200160048201548152505090503373ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff161461075d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075490612c33565b60405180910390fd5b610766826119cd565b817f685d8c78676f49f063687ffa28c244b35c920571b9414804a6837347518fbe2460405160405180910390a25050565b6000600554905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915090505481565b3373ffffffffffffffffffffffffffffffffffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610851919061262f565b60206040518083038186803b15801561086957600080fd5b505afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190612c68565b73ffffffffffffffffffffffffffffffffffffffff16146108f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ee90612c33565b60405180910390fd5b60025434101561093c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093390612ce1565b60405180910390fd5b600061094784611c6c565b90506000600481111561095d5761095c6127d6565b5b8160048111156109705761096f6127d6565b5b14806109a057506001600481111561098b5761098a6127d6565b5b81600481111561099e5761099d6127d6565b5b145b6109df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d690612d4d565b60405180910390fd5b6000600254346109ef9190612d9c565b90506000811115610a42573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a40573d6000803e3d6000fd5b505b60025460036000828254610a569190612dd0565b9250508190555060056000815480929190610a7090612e26565b919050555084600760006005548152602001908152602001600020819055506005546008600087815260200190815260200160002081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401610b0893929190612e6f565b600060405180830381600087803b158015610b2257600080fd5b505af1158015610b36573d6000803e3d6000fd5b505050506000610b4586611d29565b90506040518060c001604052808781526020018681526020018281526020013373ffffffffffffffffffffffffffffffffffffffff168152602001856001811115610b9357610b926127d6565b5b81526020016002548152506001600088815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548160ff02191690836001811115610c4157610c406127d6565b5b021790555060a08201518160040155905050857f9a7f66ba75717b72817f817d56422f4229672b97d535080ff5fdc87a33ed73b48686604051610c85929190612ea6565b60405180910390a2505050505050565b610c9d611ea0565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160149054906101000a900460ff16908060040154905086565b610d52611ea0565b610d5c6000611f1e565b565b610d6781611495565b15610d7a57610d7581611fe2565b6111ca565b6000600160008381526020019081526020016000206040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff166001811115610e3357610e326127d6565b5b6001811115610e4557610e446127d6565b5b81526020016004820154815250509050610e5e826111cd565b610e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9490612f1b565b60405180910390fd5b60008160a0015190508060036000828254610eb89190612d9c565b92505081905550610ec88361201b565b60016000848152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a81549060ff0219169055600482016000905550506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa357600080fd5b505afa158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190612c68565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161101891906128e4565b60206040518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110689190612f50565b9050611073846120ca565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8560600151838573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110ce91906128e4565b60206040518083038186803b1580156110e657600080fd5b505afa1580156110fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111e9190612f50565b6111289190612d9c565b6040518363ffffffff1660e01b8152600401611145929190612f7d565b602060405180830381600087803b15801561115f57600080fd5b505af1158015611173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111979190612fd2565b50847ff04e76aa8ad52cdbc4c00dcd9f787836e6fca3c72d82d19722b9404174882e8060405160405180910390a2505050505b50565b60006111d882611495565b156111e65760019050611368565b6000600160008481526020019081526020016000206040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff16600181111561129f5761129e6127d6565b5b60018111156112b1576112b06127d6565b5b815260200160048201548152505090506000816040015114156112d8576000915050611368565b60006112e2611856565b905060008060018111156112f9576112f86127d6565b5b836080015160018111156113105761130f6127d6565b5b14156113255782602001518210159050611361565b600180811115611338576113376127d6565b5b8360800151600181111561134f5761134e6127d6565b5b141561136057826020015182111590505b5b8093505050505b919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6113c4611ea0565b6000479050600354811161140d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114049061304b565b60405180910390fd5b60006003548261141d9190612d9c565b9050808261142b9190612d9c565b600381905550611439611393565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561147e573d6000803e3d6000fd5b505050565b61148b611ea0565b8060068190555050565b600080600160008481526020019081526020016000206040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff16600181111561154f5761154e6127d6565b5b6001811115611561576115606127d6565b5b815260200160048201548152505090508060400151610708426115849190612dd0565b1015915050919050565b611596611ea0565b8060028190555050565b60025481565b60065481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060048251101561163f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611636906130dd565b60405180910390fd5b6000600467ffffffffffffffff81111561165c5761165b612992565b5b6040519080825280601f01601f19166020018201604052801561168e5781602001600182028036833780820191505090505b50905060005b6004811015611710578381815181106116b0576116af6130fd565b5b602001015160f81c60f81b8282815181106116ce576116cd6130fd565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061170890612e26565b915050611694565b5080915050919050565b60076020528060005260406000206000915090505481565b60006001600085815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146117db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d290612c33565b60405180910390fd5b828160010181905550818160030160146101000a81548160ff0219169083600181111561180b5761180a6127d6565b5b0217905550837f19bc6e88d8ad8551e8f97618ad02246d21b510f845731c4c74f6cf9968c9b2298484604051611842929190612ea6565b60405180910390a250505050565b60035481565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156118c157600080fd5b505afa1580156118d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f991906131a4565b50505091505060008113611942576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119399061326b565b60405180910390fd5b8091505090565b611951611ea0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b8906132fd565b60405180910390fd5b6119ca81611f1e565b50565b6000600160008381526020019081526020016000206040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff166001811115611a8657611a856127d6565b5b6001811115611a9857611a976127d6565b5b815260200160048201548152505090506000816040015111611aef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae690613369565b60405180910390fd5b60008160a0015190508060036000828254611b0a9190612d9c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611b57573d6000803e3d6000fd5b50611b618361201b565b60016000848152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a81549060ff021916905560048201600090555050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308460600151866040518463ffffffff1660e01b8152600401611c3593929190612e6f565b600060405180830381600087803b158015611c4f57600080fd5b505af1158015611c63573d6000803e3d6000fd5b50505050505050565b600080600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166313ddc401846040518263ffffffff1660e01b8152600401611cca919061262f565b60c06040518083038186803b158015611ce257600080fd5b505afa158015611cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1a919061347d565b90508060400151915050919050565b600080600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166313ddc401846040518263ffffffff1660e01b8152600401611d87919061262f565b60c06040518083038186803b158015611d9f57600080fd5b505afa158015611db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd7919061347d565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4c4a0d083602001516040518263ffffffff1660e01b8152600401611e3a919061262f565b60006040518083038186803b158015611e5257600080fd5b505afa158015611e66573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e8f91906136fa565b915050806020015192505050919050565b611ea861244e565b73ffffffffffffffffffffffffffffffffffffffff16611ec6611393565b73ffffffffffffffffffffffffffffffffffffffff1614611f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f13906137a4565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611feb816119cd565b807f688a42334cd19ec1b6dcbd514ba5e1d0040177d7faf2ba24c41f4aa9a1f1391d60405160405180910390a250565b6000600860008381526020019081526020016000205490506000600760006005548152602001908152602001600020549050806007600084815260200190815260200160002081905550816008600083815260200190815260200160002081905550600760006005548152602001908152602001600020600090556008600084815260200190815260200160002060009055600560008154809291906120c0906137c4565b9190505550505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166313ddc40183600001516040518263ffffffff1660e01b815260040161212b919061262f565b60c06040518083038186803b15801561214357600080fd5b505afa158015612157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217b919061347d565b90506000604051806101200160405280836020015181526020018360000151815260200160018152602001836040015160048111156121bd576121bc6127d6565b5b60048111156121cf576121ce6127d6565b5b60048111156121e1576121e06127d6565b5b81526020018360600151815260200160008152602001600081526020016fffffffffffffffffffffffffffffffff80168152602001600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152509050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c8e7624826040518263ffffffff1660e01b81526004016122af919061390b565b606060405180830381600087803b1580156122c957600080fd5b505af19250505080156122fa57506040513d601f19601f820116820180604052508101906122f7919061398b565b60015b612447573d806000811461232a576040519150601f19603f3d011682016040523d82523d6000602084013e61232f565b606091505b5061233981612456565b156123f157600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad884d6b836040518263ffffffff1660e01b8152600401612399919061390b565b606060405180830381600087803b1580156123b357600080fd5b505af11580156123c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123eb919061398b565b50612441565b808060200190518101906124059190613a59565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124389190613ae6565b60405180910390fd5b50612449565b505b505050565b600033905090565b6000612461826115f8565b805190602001206040516024016040516020818303038152906040527fcb31f25c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508051906020012014806125955750612502826115f8565b805190602001206040516024016040516020818303038152906040527fd9373769000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505080519060200120145b156125a357600190506125a4565b5b919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6125d0816125bd565b81146125db57600080fd5b50565b6000813590506125ed816125c7565b92915050565b600060208284031215612609576126086125b3565b5b6000612617848285016125de565b91505092915050565b612629816125bd565b82525050565b60006020820190506126446000830184612620565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061268f61268a6126858461264a565b61266a565b61264a565b9050919050565b60006126a182612674565b9050919050565b60006126b382612696565b9050919050565b6126c3816126a8565b82525050565b60006020820190506126de60008301846126ba565b92915050565b600281106126f157600080fd5b50565b600081359050612703816126e4565b92915050565b600080600060608486031215612722576127216125b3565b5b6000612730868287016125de565b9350506020612741868287016125de565b9250506040612752868287016126f4565b9150509250925092565b60006127678261264a565b9050919050565b6127778161275c565b811461278257600080fd5b50565b6000813590506127948161276e565b92915050565b6000602082840312156127b0576127af6125b3565b5b60006127be84828501612785565b91505092915050565b6127d08161275c565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612816576128156127d6565b5b50565b600081905061282782612805565b919050565b600061283782612819565b9050919050565b6128478161282c565b82525050565b600060c0820190506128626000830189612620565b61286f6020830188612620565b61287c6040830187612620565b61288960608301866127c7565b612896608083018561283e565b6128a360a0830184612620565b979650505050505050565b60008115159050919050565b6128c3816128ae565b82525050565b60006020820190506128de60008301846128ba565b92915050565b60006020820190506128f960008301846127c7565b92915050565b600061290a82612696565b9050919050565b61291a816128ff565b82525050565b60006020820190506129356000830184612911565b92915050565b600061294682612696565b9050919050565b6129568161293b565b82525050565b6000602082019050612971600083018461294d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129ca82612981565b810181811067ffffffffffffffff821117156129e9576129e8612992565b5b80604052505050565b60006129fc6125a9565b9050612a0882826129c1565b919050565b600067ffffffffffffffff821115612a2857612a27612992565b5b612a3182612981565b9050602081019050919050565b82818337600083830152505050565b6000612a60612a5b84612a0d565b6129f2565b905082815260208101848484011115612a7c57612a7b61297c565b5b612a87848285612a3e565b509392505050565b600082601f830112612aa457612aa3612977565b5b8135612ab4848260208601612a4d565b91505092915050565b600060208284031215612ad357612ad26125b3565b5b600082013567ffffffffffffffff811115612af157612af06125b8565b5b612afd84828501612a8f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b40578082015181840152602081019050612b25565b83811115612b4f576000848401525b50505050565b6000612b6082612b06565b612b6a8185612b11565b9350612b7a818560208601612b22565b612b8381612981565b840191505092915050565b60006020820190508181036000830152612ba88184612b55565b905092915050565b600082825260208201905092915050565b7f43616c6c6572206d75737420626520746865206f776e6572206f66207468652060008201527f746f6b656e000000000000000000000000000000000000000000000000000000602082015250565b6000612c1d602583612bb0565b9150612c2882612bc1565b604082019050919050565b60006020820190508181036000830152612c4c81612c10565b9050919050565b600081519050612c628161276e565b92915050565b600060208284031215612c7e57612c7d6125b3565b5b6000612c8c84828501612c53565b91505092915050565b7f4e6f7420656e6f75676820636f6d6d697373696f6e2073656e74000000000000600082015250565b6000612ccb601a83612bb0565b9150612cd682612c95565b602082019050919050565b60006020820190508181036000830152612cfa81612cbe565b9050919050565b7f696e76616c696420747970650000000000000000000000000000000000000000600082015250565b6000612d37600c83612bb0565b9150612d4282612d01565b602082019050919050565b60006020820190508181036000830152612d6681612d2a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612da7826125bd565b9150612db2836125bd565b925082821015612dc557612dc4612d6d565b5b828203905092915050565b6000612ddb826125bd565b9150612de6836125bd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e1b57612e1a612d6d565b5b828201905092915050565b6000612e31826125bd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e6457612e63612d6d565b5b600182019050919050565b6000606082019050612e8460008301866127c7565b612e9160208301856127c7565b612e9e6040830184612620565b949350505050565b6000604082019050612ebb6000830185612620565b612ec8602083018461283e565b9392505050565b7f53746f70206f7264657220636f6e646974696f6e73206e6f74206d6574000000600082015250565b6000612f05601d83612bb0565b9150612f1082612ecf565b602082019050919050565b60006020820190508181036000830152612f3481612ef8565b9050919050565b600081519050612f4a816125c7565b92915050565b600060208284031215612f6657612f656125b3565b5b6000612f7484828501612f3b565b91505092915050565b6000604082019050612f9260008301856127c7565b612f9f6020830184612620565b9392505050565b612faf816128ae565b8114612fba57600080fd5b50565b600081519050612fcc81612fa6565b92915050565b600060208284031215612fe857612fe76125b3565b5b6000612ff684828501612fbd565b91505092915050565b7f4e6f2070726f66697420617661696c61626c6520746f20776974686472617700600082015250565b6000613035601f83612bb0565b915061304082612fff565b602082019050919050565b6000602082019050818103600083015261306481613028565b9050919050565b7f446174612073686f756c64206265206174206c6561737420342062797465732060008201527f6c6f6e672e000000000000000000000000000000000000000000000000000000602082015250565b60006130c7602583612bb0565b91506130d28261306b565b604082019050919050565b600060208201905081810360008301526130f6816130ba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600069ffffffffffffffffffff82169050919050565b61314b8161312c565b811461315657600080fd5b50565b60008151905061316881613142565b92915050565b6000819050919050565b6131818161316e565b811461318c57600080fd5b50565b60008151905061319e81613178565b92915050565b600080600080600060a086880312156131c0576131bf6125b3565b5b60006131ce88828901613159565b95505060206131df8882890161318f565b94505060406131f088828901612f3b565b935050606061320188828901612f3b565b925050608061321288828901613159565b9150509295509295909350565b7f50726963652073686f756c64206265203e3d2030000000000000000000000000600082015250565b6000613255601483612bb0565b91506132608261321f565b602082019050919050565b6000602082019050818103600083015261328481613248565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006132e7602683612bb0565b91506132f28261328b565b604082019050919050565b60006020820190508181036000830152613316816132da565b9050919050565b7f4e6f20746f6b656e2073657420666f722073746f70206f726465720000000000600082015250565b6000613353601b83612bb0565b915061335e8261331d565b602082019050919050565b6000602082019050818103600083015261338281613346565b9050919050565b600080fd5b600080fd5b600581106133a057600080fd5b50565b6000815190506133b281613393565b92915050565b600681106133c557600080fd5b50565b6000815190506133d7816133b8565b92915050565b600060c082840312156133f3576133f2613389565b5b6133fd60c06129f2565b9050600061340d84828501612f3b565b600083015250602061342184828501612f3b565b6020830152506040613435848285016133a3565b604083015250606061344984828501612f3b565b606083015250608061345d84828501612f3b565b60808301525060a0613471848285016133c8565b60a08301525092915050565b600060c08284031215613493576134926125b3565b5b60006134a1848285016133dd565b91505092915050565b600061012082840312156134c1576134c0613389565b5b6134cc6101206129f2565b905060006134dc84828501612f3b565b60008301525060206134f084828501612f3b565b602083015250604061350484828501612f3b565b604083015250606061351884828501612f3b565b606083015250608061352c84828501612f3b565b60808301525060a061354084828501612f3b565b60a08301525060c061355484828501612f3b565b60c08301525060e061356884828501612f3b565b60e08301525061010061357d84828501612f3b565b6101008301525092915050565b600067ffffffffffffffff8211156135a5576135a4612992565b5b602082029050602081019050919050565b600080fd5b60006135ce6135c98461358a565b6129f2565b905080838252602082019050602084028301858111156135f1576135f06135b6565b5b835b8181101561361a57806136068882612f3b565b8452602084019350506020810190506135f3565b5050509392505050565b600082601f83011261363957613638612977565b5b81516136498482602086016135bb565b91505092915050565b600060a0828403121561366857613667613389565b5b61367260a06129f2565b9050600061368284828501612f3b565b600083015250602061369684828501612f3b565b60208301525060406136aa84828501612f3b565b60408301525060606136be84828501612fbd565b606083015250608082015167ffffffffffffffff8111156136e2576136e161338e565b5b6136ee84828501613624565b60808301525092915050565b6000806101408385031215613712576137116125b3565b5b6000613720858286016134aa565b92505061012083015167ffffffffffffffff811115613742576137416125b8565b5b61374e85828601613652565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061378e602083612bb0565b915061379982613758565b602082019050919050565b600060208201905081810360008301526137bd81613781565b9050919050565b60006137cf826125bd565b915060008214156137e3576137e2612d6d565b5b600182039050919050565b6137f7816125bd565b82525050565b6005811061380e5761380d6127d6565b5b50565b600081905061381f826137fd565b919050565b600061382f82613811565b9050919050565b61383f81613824565b82525050565b61384e8161275c565b82525050565b6101208201600082015161386b60008501826137ee565b50602082015161387e60208501826137ee565b50604082015161389160408501826137ee565b5060608201516138a46060850182613836565b5060808201516138b760808501826137ee565b5060a08201516138ca60a08501826137ee565b5060c08201516138dd60c08501826137ee565b5060e08201516138f060e08501826137ee565b50610100820151613905610100850182613845565b50505050565b6000610120820190506139216000830184613854565b92915050565b60006060828403121561393d5761393c613389565b5b61394760606129f2565b9050600061395784828501612f3b565b600083015250602061396b84828501612f3b565b602083015250604061397f84828501612f3b565b60408301525092915050565b6000606082840312156139a1576139a06125b3565b5b60006139af84828501613927565b91505092915050565b600067ffffffffffffffff8211156139d3576139d2612992565b5b6139dc82612981565b9050602081019050919050565b60006139fc6139f7846139b8565b6129f2565b905082815260208101848484011115613a1857613a1761297c565b5b613a23848285612b22565b509392505050565b600082601f830112613a4057613a3f612977565b5b8151613a508482602086016139e9565b91505092915050565b600060208284031215613a6f57613a6e6125b3565b5b600082015167ffffffffffffffff811115613a8d57613a8c6125b8565b5b613a9984828501613a2b565b91505092915050565b600081519050919050565b6000613ab882613aa2565b613ac28185612bb0565b9350613ad2818560208601612b22565b613adb81612981565b840191505092915050565b60006020820190508181036000830152613b008184613aad565b90509291505056fea26469706673582212205324dc2c9758d27e3174bcb56ed092a1f6382abdc3f8b8718dc3f905fd1efc5164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c80639ed5d1d8116100d1578063bb4a9f881161008a578063e5b7eadf11610064578063e5b7eadf14610568578063e62d64f614610591578063eb91d37e146105bc578063f2fde38b146105e757610181565b8063bb4a9f88146104c3578063d07d0b66146104ee578063e233ac581461052b57610181565b80639ed5d1d8146103b3578063a4cbf5f4146103dc578063b02e044814610419578063b116487a14610442578063b30e1be81461046d578063b888879e1461049857610181565b80635fb8bcd51161013e57806386d36c9a1161011857806386d36c9a146103095780638cf57cb9146103465780638da5cb5b14610371578063959499b61461039c57610181565b80635fb8bcd514610287578063715018a6146102c957806378257f66146102e057610181565b80631d2f6b7d1461018657806324e5eacd146101af5780632bab754b146101da5780632d5181601461020557806340eb5502146102425780635e00e6791461025e575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a891906125f3565b610610565b005b3480156101bb57600080fd5b506101c4610797565b6040516101d1919061262f565b60405180910390f35b3480156101e657600080fd5b506101ef6107a1565b6040516101fc91906126c9565b60405180910390f35b34801561021157600080fd5b5061022c600480360381019061022791906125f3565b6107c7565b604051610239919061262f565b60405180910390f35b61025c60048036038101906102579190612709565b6107df565b005b34801561026a57600080fd5b506102856004803603810190610280919061279a565b610c95565b005b34801561029357600080fd5b506102ae60048036038101906102a991906125f3565b610ce1565b6040516102c09695949392919061284d565b60405180910390f35b3480156102d557600080fd5b506102de610d4a565b005b3480156102ec57600080fd5b50610307600480360381019061030291906125f3565b610d5e565b005b34801561031557600080fd5b50610330600480360381019061032b91906125f3565b6111cd565b60405161033d91906128c9565b60405180910390f35b34801561035257600080fd5b5061035b61136d565b60405161036891906128e4565b60405180910390f35b34801561037d57600080fd5b50610386611393565b60405161039391906128e4565b60405180910390f35b3480156103a857600080fd5b506103b16113bc565b005b3480156103bf57600080fd5b506103da60048036038101906103d591906125f3565b611483565b005b3480156103e857600080fd5b5061040360048036038101906103fe91906125f3565b611495565b60405161041091906128c9565b60405180910390f35b34801561042557600080fd5b50610440600480360381019061043b91906125f3565b61158e565b005b34801561044e57600080fd5b506104576115a0565b604051610464919061262f565b60405180910390f35b34801561047957600080fd5b506104826115a6565b60405161048f919061262f565b60405180910390f35b3480156104a457600080fd5b506104ad6115ac565b6040516104ba9190612920565b60405180910390f35b3480156104cf57600080fd5b506104d86115d2565b6040516104e5919061295c565b60405180910390f35b3480156104fa57600080fd5b5061051560048036038101906105109190612abd565b6115f8565b6040516105229190612b8e565b60405180910390f35b34801561053757600080fd5b50610552600480360381019061054d91906125f3565b61171a565b60405161055f919061262f565b60405180910390f35b34801561057457600080fd5b5061058f600480360381019061058a9190612709565b611732565b005b34801561059d57600080fd5b506105a6611850565b6040516105b3919061262f565b60405180910390f35b3480156105c857600080fd5b506105d1611856565b6040516105de919061262f565b60405180910390f35b3480156105f357600080fd5b5061060e6004803603810190610609919061279a565b611949565b005b6000600160008381526020019081526020016000206040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff1660018111156106c9576106c86127d6565b5b60018111156106db576106da6127d6565b5b815260200160048201548152505090503373ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff161461075d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075490612c33565b60405180910390fd5b610766826119cd565b817f685d8c78676f49f063687ffa28c244b35c920571b9414804a6837347518fbe2460405160405180910390a25050565b6000600554905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915090505481565b3373ffffffffffffffffffffffffffffffffffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610851919061262f565b60206040518083038186803b15801561086957600080fd5b505afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190612c68565b73ffffffffffffffffffffffffffffffffffffffff16146108f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ee90612c33565b60405180910390fd5b60025434101561093c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093390612ce1565b60405180910390fd5b600061094784611c6c565b90506000600481111561095d5761095c6127d6565b5b8160048111156109705761096f6127d6565b5b14806109a057506001600481111561098b5761098a6127d6565b5b81600481111561099e5761099d6127d6565b5b145b6109df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d690612d4d565b60405180910390fd5b6000600254346109ef9190612d9c565b90506000811115610a42573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a40573d6000803e3d6000fd5b505b60025460036000828254610a569190612dd0565b9250508190555060056000815480929190610a7090612e26565b919050555084600760006005548152602001908152602001600020819055506005546008600087815260200190815260200160002081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401610b0893929190612e6f565b600060405180830381600087803b158015610b2257600080fd5b505af1158015610b36573d6000803e3d6000fd5b505050506000610b4586611d29565b90506040518060c001604052808781526020018681526020018281526020013373ffffffffffffffffffffffffffffffffffffffff168152602001856001811115610b9357610b926127d6565b5b81526020016002548152506001600088815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548160ff02191690836001811115610c4157610c406127d6565b5b021790555060a08201518160040155905050857f9a7f66ba75717b72817f817d56422f4229672b97d535080ff5fdc87a33ed73b48686604051610c85929190612ea6565b60405180910390a2505050505050565b610c9d611ea0565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160149054906101000a900460ff16908060040154905086565b610d52611ea0565b610d5c6000611f1e565b565b610d6781611495565b15610d7a57610d7581611fe2565b6111ca565b6000600160008381526020019081526020016000206040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff166001811115610e3357610e326127d6565b5b6001811115610e4557610e446127d6565b5b81526020016004820154815250509050610e5e826111cd565b610e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9490612f1b565b60405180910390fd5b60008160a0015190508060036000828254610eb89190612d9c565b92505081905550610ec88361201b565b60016000848152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a81549060ff0219169055600482016000905550506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa357600080fd5b505afa158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190612c68565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161101891906128e4565b60206040518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110689190612f50565b9050611073846120ca565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8560600151838573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110ce91906128e4565b60206040518083038186803b1580156110e657600080fd5b505afa1580156110fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111e9190612f50565b6111289190612d9c565b6040518363ffffffff1660e01b8152600401611145929190612f7d565b602060405180830381600087803b15801561115f57600080fd5b505af1158015611173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111979190612fd2565b50847ff04e76aa8ad52cdbc4c00dcd9f787836e6fca3c72d82d19722b9404174882e8060405160405180910390a2505050505b50565b60006111d882611495565b156111e65760019050611368565b6000600160008481526020019081526020016000206040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff16600181111561129f5761129e6127d6565b5b60018111156112b1576112b06127d6565b5b815260200160048201548152505090506000816040015114156112d8576000915050611368565b60006112e2611856565b905060008060018111156112f9576112f86127d6565b5b836080015160018111156113105761130f6127d6565b5b14156113255782602001518210159050611361565b600180811115611338576113376127d6565b5b8360800151600181111561134f5761134e6127d6565b5b141561136057826020015182111590505b5b8093505050505b919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6113c4611ea0565b6000479050600354811161140d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114049061304b565b60405180910390fd5b60006003548261141d9190612d9c565b9050808261142b9190612d9c565b600381905550611439611393565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561147e573d6000803e3d6000fd5b505050565b61148b611ea0565b8060068190555050565b600080600160008481526020019081526020016000206040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff16600181111561154f5761154e6127d6565b5b6001811115611561576115606127d6565b5b815260200160048201548152505090508060400151610708426115849190612dd0565b1015915050919050565b611596611ea0565b8060028190555050565b60025481565b60065481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060048251101561163f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611636906130dd565b60405180910390fd5b6000600467ffffffffffffffff81111561165c5761165b612992565b5b6040519080825280601f01601f19166020018201604052801561168e5781602001600182028036833780820191505090505b50905060005b6004811015611710578381815181106116b0576116af6130fd565b5b602001015160f81c60f81b8282815181106116ce576116cd6130fd565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061170890612e26565b915050611694565b5080915050919050565b60076020528060005260406000206000915090505481565b60006001600085815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146117db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d290612c33565b60405180910390fd5b828160010181905550818160030160146101000a81548160ff0219169083600181111561180b5761180a6127d6565b5b0217905550837f19bc6e88d8ad8551e8f97618ad02246d21b510f845731c4c74f6cf9968c9b2298484604051611842929190612ea6565b60405180910390a250505050565b60035481565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156118c157600080fd5b505afa1580156118d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f991906131a4565b50505091505060008113611942576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119399061326b565b60405180910390fd5b8091505090565b611951611ea0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b8906132fd565b60405180910390fd5b6119ca81611f1e565b50565b6000600160008381526020019081526020016000206040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff166001811115611a8657611a856127d6565b5b6001811115611a9857611a976127d6565b5b815260200160048201548152505090506000816040015111611aef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae690613369565b60405180910390fd5b60008160a0015190508060036000828254611b0a9190612d9c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611b57573d6000803e3d6000fd5b50611b618361201b565b60016000848152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a81549060ff021916905560048201600090555050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308460600151866040518463ffffffff1660e01b8152600401611c3593929190612e6f565b600060405180830381600087803b158015611c4f57600080fd5b505af1158015611c63573d6000803e3d6000fd5b50505050505050565b600080600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166313ddc401846040518263ffffffff1660e01b8152600401611cca919061262f565b60c06040518083038186803b158015611ce257600080fd5b505afa158015611cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1a919061347d565b90508060400151915050919050565b600080600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166313ddc401846040518263ffffffff1660e01b8152600401611d87919061262f565b60c06040518083038186803b158015611d9f57600080fd5b505afa158015611db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd7919061347d565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4c4a0d083602001516040518263ffffffff1660e01b8152600401611e3a919061262f565b60006040518083038186803b158015611e5257600080fd5b505afa158015611e66573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e8f91906136fa565b915050806020015192505050919050565b611ea861244e565b73ffffffffffffffffffffffffffffffffffffffff16611ec6611393565b73ffffffffffffffffffffffffffffffffffffffff1614611f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f13906137a4565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611feb816119cd565b807f688a42334cd19ec1b6dcbd514ba5e1d0040177d7faf2ba24c41f4aa9a1f1391d60405160405180910390a250565b6000600860008381526020019081526020016000205490506000600760006005548152602001908152602001600020549050806007600084815260200190815260200160002081905550816008600083815260200190815260200160002081905550600760006005548152602001908152602001600020600090556008600084815260200190815260200160002060009055600560008154809291906120c0906137c4565b9190505550505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166313ddc40183600001516040518263ffffffff1660e01b815260040161212b919061262f565b60c06040518083038186803b15801561214357600080fd5b505afa158015612157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217b919061347d565b90506000604051806101200160405280836020015181526020018360000151815260200160018152602001836040015160048111156121bd576121bc6127d6565b5b60048111156121cf576121ce6127d6565b5b60048111156121e1576121e06127d6565b5b81526020018360600151815260200160008152602001600081526020016fffffffffffffffffffffffffffffffff80168152602001600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152509050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c8e7624826040518263ffffffff1660e01b81526004016122af919061390b565b606060405180830381600087803b1580156122c957600080fd5b505af19250505080156122fa57506040513d601f19601f820116820180604052508101906122f7919061398b565b60015b612447573d806000811461232a576040519150601f19603f3d011682016040523d82523d6000602084013e61232f565b606091505b5061233981612456565b156123f157600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad884d6b836040518263ffffffff1660e01b8152600401612399919061390b565b606060405180830381600087803b1580156123b357600080fd5b505af11580156123c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123eb919061398b565b50612441565b808060200190518101906124059190613a59565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124389190613ae6565b60405180910390fd5b50612449565b505b505050565b600033905090565b6000612461826115f8565b805190602001206040516024016040516020818303038152906040527fcb31f25c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508051906020012014806125955750612502826115f8565b805190602001206040516024016040516020818303038152906040527fd9373769000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505080519060200120145b156125a357600190506125a4565b5b919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6125d0816125bd565b81146125db57600080fd5b50565b6000813590506125ed816125c7565b92915050565b600060208284031215612609576126086125b3565b5b6000612617848285016125de565b91505092915050565b612629816125bd565b82525050565b60006020820190506126446000830184612620565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061268f61268a6126858461264a565b61266a565b61264a565b9050919050565b60006126a182612674565b9050919050565b60006126b382612696565b9050919050565b6126c3816126a8565b82525050565b60006020820190506126de60008301846126ba565b92915050565b600281106126f157600080fd5b50565b600081359050612703816126e4565b92915050565b600080600060608486031215612722576127216125b3565b5b6000612730868287016125de565b9350506020612741868287016125de565b9250506040612752868287016126f4565b9150509250925092565b60006127678261264a565b9050919050565b6127778161275c565b811461278257600080fd5b50565b6000813590506127948161276e565b92915050565b6000602082840312156127b0576127af6125b3565b5b60006127be84828501612785565b91505092915050565b6127d08161275c565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612816576128156127d6565b5b50565b600081905061282782612805565b919050565b600061283782612819565b9050919050565b6128478161282c565b82525050565b600060c0820190506128626000830189612620565b61286f6020830188612620565b61287c6040830187612620565b61288960608301866127c7565b612896608083018561283e565b6128a360a0830184612620565b979650505050505050565b60008115159050919050565b6128c3816128ae565b82525050565b60006020820190506128de60008301846128ba565b92915050565b60006020820190506128f960008301846127c7565b92915050565b600061290a82612696565b9050919050565b61291a816128ff565b82525050565b60006020820190506129356000830184612911565b92915050565b600061294682612696565b9050919050565b6129568161293b565b82525050565b6000602082019050612971600083018461294d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129ca82612981565b810181811067ffffffffffffffff821117156129e9576129e8612992565b5b80604052505050565b60006129fc6125a9565b9050612a0882826129c1565b919050565b600067ffffffffffffffff821115612a2857612a27612992565b5b612a3182612981565b9050602081019050919050565b82818337600083830152505050565b6000612a60612a5b84612a0d565b6129f2565b905082815260208101848484011115612a7c57612a7b61297c565b5b612a87848285612a3e565b509392505050565b600082601f830112612aa457612aa3612977565b5b8135612ab4848260208601612a4d565b91505092915050565b600060208284031215612ad357612ad26125b3565b5b600082013567ffffffffffffffff811115612af157612af06125b8565b5b612afd84828501612a8f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b40578082015181840152602081019050612b25565b83811115612b4f576000848401525b50505050565b6000612b6082612b06565b612b6a8185612b11565b9350612b7a818560208601612b22565b612b8381612981565b840191505092915050565b60006020820190508181036000830152612ba88184612b55565b905092915050565b600082825260208201905092915050565b7f43616c6c6572206d75737420626520746865206f776e6572206f66207468652060008201527f746f6b656e000000000000000000000000000000000000000000000000000000602082015250565b6000612c1d602583612bb0565b9150612c2882612bc1565b604082019050919050565b60006020820190508181036000830152612c4c81612c10565b9050919050565b600081519050612c628161276e565b92915050565b600060208284031215612c7e57612c7d6125b3565b5b6000612c8c84828501612c53565b91505092915050565b7f4e6f7420656e6f75676820636f6d6d697373696f6e2073656e74000000000000600082015250565b6000612ccb601a83612bb0565b9150612cd682612c95565b602082019050919050565b60006020820190508181036000830152612cfa81612cbe565b9050919050565b7f696e76616c696420747970650000000000000000000000000000000000000000600082015250565b6000612d37600c83612bb0565b9150612d4282612d01565b602082019050919050565b60006020820190508181036000830152612d6681612d2a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612da7826125bd565b9150612db2836125bd565b925082821015612dc557612dc4612d6d565b5b828203905092915050565b6000612ddb826125bd565b9150612de6836125bd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e1b57612e1a612d6d565b5b828201905092915050565b6000612e31826125bd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e6457612e63612d6d565b5b600182019050919050565b6000606082019050612e8460008301866127c7565b612e9160208301856127c7565b612e9e6040830184612620565b949350505050565b6000604082019050612ebb6000830185612620565b612ec8602083018461283e565b9392505050565b7f53746f70206f7264657220636f6e646974696f6e73206e6f74206d6574000000600082015250565b6000612f05601d83612bb0565b9150612f1082612ecf565b602082019050919050565b60006020820190508181036000830152612f3481612ef8565b9050919050565b600081519050612f4a816125c7565b92915050565b600060208284031215612f6657612f656125b3565b5b6000612f7484828501612f3b565b91505092915050565b6000604082019050612f9260008301856127c7565b612f9f6020830184612620565b9392505050565b612faf816128ae565b8114612fba57600080fd5b50565b600081519050612fcc81612fa6565b92915050565b600060208284031215612fe857612fe76125b3565b5b6000612ff684828501612fbd565b91505092915050565b7f4e6f2070726f66697420617661696c61626c6520746f20776974686472617700600082015250565b6000613035601f83612bb0565b915061304082612fff565b602082019050919050565b6000602082019050818103600083015261306481613028565b9050919050565b7f446174612073686f756c64206265206174206c6561737420342062797465732060008201527f6c6f6e672e000000000000000000000000000000000000000000000000000000602082015250565b60006130c7602583612bb0565b91506130d28261306b565b604082019050919050565b600060208201905081810360008301526130f6816130ba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600069ffffffffffffffffffff82169050919050565b61314b8161312c565b811461315657600080fd5b50565b60008151905061316881613142565b92915050565b6000819050919050565b6131818161316e565b811461318c57600080fd5b50565b60008151905061319e81613178565b92915050565b600080600080600060a086880312156131c0576131bf6125b3565b5b60006131ce88828901613159565b95505060206131df8882890161318f565b94505060406131f088828901612f3b565b935050606061320188828901612f3b565b925050608061321288828901613159565b9150509295509295909350565b7f50726963652073686f756c64206265203e3d2030000000000000000000000000600082015250565b6000613255601483612bb0565b91506132608261321f565b602082019050919050565b6000602082019050818103600083015261328481613248565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006132e7602683612bb0565b91506132f28261328b565b604082019050919050565b60006020820190508181036000830152613316816132da565b9050919050565b7f4e6f20746f6b656e2073657420666f722073746f70206f726465720000000000600082015250565b6000613353601b83612bb0565b915061335e8261331d565b602082019050919050565b6000602082019050818103600083015261338281613346565b9050919050565b600080fd5b600080fd5b600581106133a057600080fd5b50565b6000815190506133b281613393565b92915050565b600681106133c557600080fd5b50565b6000815190506133d7816133b8565b92915050565b600060c082840312156133f3576133f2613389565b5b6133fd60c06129f2565b9050600061340d84828501612f3b565b600083015250602061342184828501612f3b565b6020830152506040613435848285016133a3565b604083015250606061344984828501612f3b565b606083015250608061345d84828501612f3b565b60808301525060a0613471848285016133c8565b60a08301525092915050565b600060c08284031215613493576134926125b3565b5b60006134a1848285016133dd565b91505092915050565b600061012082840312156134c1576134c0613389565b5b6134cc6101206129f2565b905060006134dc84828501612f3b565b60008301525060206134f084828501612f3b565b602083015250604061350484828501612f3b565b604083015250606061351884828501612f3b565b606083015250608061352c84828501612f3b565b60808301525060a061354084828501612f3b565b60a08301525060c061355484828501612f3b565b60c08301525060e061356884828501612f3b565b60e08301525061010061357d84828501612f3b565b6101008301525092915050565b600067ffffffffffffffff8211156135a5576135a4612992565b5b602082029050602081019050919050565b600080fd5b60006135ce6135c98461358a565b6129f2565b905080838252602082019050602084028301858111156135f1576135f06135b6565b5b835b8181101561361a57806136068882612f3b565b8452602084019350506020810190506135f3565b5050509392505050565b600082601f83011261363957613638612977565b5b81516136498482602086016135bb565b91505092915050565b600060a0828403121561366857613667613389565b5b61367260a06129f2565b9050600061368284828501612f3b565b600083015250602061369684828501612f3b565b60208301525060406136aa84828501612f3b565b60408301525060606136be84828501612fbd565b606083015250608082015167ffffffffffffffff8111156136e2576136e161338e565b5b6136ee84828501613624565b60808301525092915050565b6000806101408385031215613712576137116125b3565b5b6000613720858286016134aa565b92505061012083015167ffffffffffffffff811115613742576137416125b8565b5b61374e85828601613652565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061378e602083612bb0565b915061379982613758565b602082019050919050565b600060208201905081810360008301526137bd81613781565b9050919050565b60006137cf826125bd565b915060008214156137e3576137e2612d6d565b5b600182039050919050565b6137f7816125bd565b82525050565b6005811061380e5761380d6127d6565b5b50565b600081905061381f826137fd565b919050565b600061382f82613811565b9050919050565b61383f81613824565b82525050565b61384e8161275c565b82525050565b6101208201600082015161386b60008501826137ee565b50602082015161387e60208501826137ee565b50604082015161389160408501826137ee565b5060608201516138a46060850182613836565b5060808201516138b760808501826137ee565b5060a08201516138ca60a08501826137ee565b5060c08201516138dd60c08501826137ee565b5060e08201516138f060e08501826137ee565b50610100820151613905610100850182613845565b50505050565b6000610120820190506139216000830184613854565b92915050565b60006060828403121561393d5761393c613389565b5b61394760606129f2565b9050600061395784828501612f3b565b600083015250602061396b84828501612f3b565b602083015250604061397f84828501612f3b565b60408301525092915050565b6000606082840312156139a1576139a06125b3565b5b60006139af84828501613927565b91505092915050565b600067ffffffffffffffff8211156139d3576139d2612992565b5b6139dc82612981565b9050602081019050919050565b60006139fc6139f7846139b8565b6129f2565b905082815260208101848484011115613a1857613a1761297c565b5b613a23848285612b22565b509392505050565b600082601f830112613a4057613a3f612977565b5b8151613a508482602086016139e9565b91505092915050565b600060208284031215613a6f57613a6e6125b3565b5b600082015167ffffffffffffffff811115613a8d57613a8c6125b8565b5b613a9984828501613a2b565b91505092915050565b600081519050919050565b6000613ab882613aa2565b613ac28185612bb0565b9350613ad2818560208601612b22565b613adb81612981565b840191505092915050565b60006020820190508181036000830152613b008184613aad565b90509291505056fea26469706673582212205324dc2c9758d27e3174bcb56ed092a1f6382abdc3f8b8718dc3f905fd1efc5164736f6c63430008090033",
  "devdoc": {
    "details": "The contract utilizes Chainlink price feeds, Lyra options protocol, and an exchange adapter for executing orders.",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "StopOrder",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract allows users to set and execute stop orders on ERC721 tokens. Users can set a price target, and when the target is met, the contract automatically executes the order and sends the profit to the user.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 610,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "tokenIdToTokenInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(TokenInfo)605_storage)"
      },
      {
        "astId": 615,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "commissionSize",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 617,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "withdrawableBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 619,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "rewardAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 621,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "activeStopCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 624,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "maxActiveStopOrders",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 628,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "indexTokenToTokenId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 632,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "idTokenToIndexToken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 635,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "priceProvider",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 638,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "optionMarket",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IOptionMarket)552"
      },
      {
        "astId": 641,
        "contract": "contracts/StopOrder.sol:StopOrder",
        "label": "optionToken",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IOptionToken)585"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IOptionMarket)552": {
        "encoding": "inplace",
        "label": "contract IOptionMarket",
        "numberOfBytes": "20"
      },
      "t_contract(IOptionToken)585": {
        "encoding": "inplace",
        "label": "contract IOptionToken",
        "numberOfBytes": "20"
      },
      "t_enum(OrderType)591": {
        "encoding": "inplace",
        "label": "enum StopOrder.OrderType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(TokenInfo)605_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StopOrder.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)605_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TokenInfo)605_storage": {
        "encoding": "inplace",
        "label": "struct StopOrder.TokenInfo",
        "members": [
          {
            "astId": 593,
            "contract": "contracts/StopOrder.sol:StopOrder",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 595,
            "contract": "contracts/StopOrder.sol:StopOrder",
            "label": "stopOrderPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 597,
            "contract": "contracts/StopOrder.sol:StopOrder",
            "label": "expirationTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 599,
            "contract": "contracts/StopOrder.sol:StopOrder",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 602,
            "contract": "contracts/StopOrder.sol:StopOrder",
            "label": "stopOrderType",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(OrderType)591"
          },
          {
            "astId": 604,
            "contract": "contracts/StopOrder.sol:StopOrder",
            "label": "commissionPaid",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}